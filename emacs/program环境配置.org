** 编辑器服务的基本概念
我们使用编辑器,就是想要她帮助我们更好的编程,因此我们需要语言服务(LSP),可以帮助我们找类,函数的引用,语法的错误,如何引入正确的包
就是帮助我们写代码; 还有另一个需要的就是(DAP),帮助我们调试代码;这两个都有点相似,在编辑器中会有一个前端一样的东西负责与后端的服务
进行交互,对于LSP可以是 *LSP-mode-->ccls/eglot*  对于dap可以是 *dap-mode-->lldb/jdb*
=程序主要有三个过程=
- ~编写~ LSP帮我我们
- ~运行~ 编译器支持
- ~调试~ 调试器支持


** what is lsp
lsp的全称是language server protocol,也就是语言服务协议,现在的语言补全包括检查都可以通过这个来实现
具体来说,就是前端,我们自己的文件可以使用任何的语言进行编写,JAVA,C,RUST,PYTHON whatever,然后会有一
服务进行进行语言服务,把我们的代码传入到一个后端的服务器,服务器返回一些补充的信息,或者函数定义,错误,补全等
这样的交互可以实现对很多语言的支持,而且可以获得最新的支持;

*** LSP的作用
#+begin_quote
LSP的主要作用是分离编辑器/IDE和语言特定的功能，允许开发者在不同的编辑器中使用相同的语言功能。它的具体作用包括：

代码补全：通过分析代码和上下文提供智能的代码补全建议。
语法检查：实时检测代码中的错误和警告。
代码导航：包括跳转到定义、查找引用、查看文档等功能。
重构：支持重命名变量、函数等重构操作。
格式化代码：自动格式化代码，使其符合编码规范。
#+end_quote

*** LSP的历史
#+begin_quote
LSP由微软在2016年发布，旨在简化Visual Studio Code的开发工作，并希望其他编辑器和IDE也能受益于统一的语言支持。LSP的发布极大地改变了开发工具的生态系统，使得以下成为可能：

跨编辑器支持：开发者可以在不同的编辑器中获得一致的语言支持体验。
语言服务器复用：编程语言的工具开发者只需开发一次语言服务器，便能支持多种编辑器。
社区贡献：由于协议的开源和标准化，更多的开发者可以为不同语言和工具贡献代
#+end_quote

*** LSP的工作流程
#+begin_quote
LSP基于客户端-服务器架构。编辑器/IDE作为客户端，语言服务器作为服务器。客户端和服务器通过LSP进行通信，典型的工作流程如下：

启动语言服务器：当编辑器打开支持的编程语言文件时，启动相应的语言服务器。
初始化：客户端发送初始化请求，服务器返回其能力（如是否支持代码补全、语法检查等）。
文件操作：客户端将文件的打开、修改、保存等操作通知服务器。
请求处理：当用户需要代码补全、跳转到定义等操作时，客户端发送请求，服务器处理请求并返回结果。
诊断信息：服务器主动向客户端发送诊断信息，如语法错误和警告。
#+end_quote

*** LSP的工作机制
#+begin_quote
LSP的工作机制
本地运行：LSP的语言服务器是一个本地进程。当你在编辑器中打开一个代码文件时，编辑器会启动相应的语言服务器进程。这个进程在本地运行，不依赖于互联网连接。
本地通信：编辑器（LSP客户端）与语言服务器之间通过本地通信（如通过标准输入/输出或本地套接字）进行交互。
离线使用：因为语言服务器在本地运行，你可以在离线环境下使用LSP提供的各种功能，如代码补全、语法检查、代码导航等。
#+end_quote

*** LSP-CCLS服务实现插件对比
#+begin_quote
1. ccls
    ccls 是一个C/C++/Objective-C语言服务器，它实现了LSP，并专注于提供这些语言的支持。
    功能：
	支持C/C++/Objective-C。
	提供智能代码补全、语法检查、代码导航、重构、代码格式化等功能。
	支持复杂的项目架构，能够解析大型项目。
	提供跨引用、跳转到定义、文档注释等高级功能。
    优点：
	高性能，适用于大型项目。
	功能丰富，特别适合C/C++开发。
	有良好的社区支持和文档。
    缺点：
	仅支持C/C++/Objective-C。
	需要较多的配置来充分利用其功能。
    
2. lsp-mode
    lsp-mode 是Emacs的一个LSP客户端，实现了对多种编程语言的支持。
    功能：
	支持多种编程语言，包括但不限于C/C++、Python、JavaScript等。
	提供代码补全、语法检查、代码导航、重构、格式化等功能。
	与lsp-ui集成，提供增强的UI支持（如悬停提示、错误列表）。
    优点：
	功能强大，支持多种语言服务器。
	与Emacs无缝集成，提供类似IDE的高级功能。
	可扩展性强，用户可以根据需要进行深度定制。
    缺点：
	配置较为复杂，初学者可能需要一些时间来掌握。
	性能可能在处理非常大的项目时有所下降。
3. eglot
    eglot 是Emacs的另一个LSP客户端，与lsp-mode相比更加轻量。
    功能：
	支持多种编程语言。
	提供基本的LSP功能，如代码补全、语法检查、代码导航等。
	配置简单，开箱即用。
    优点：

	轻量级，性能较好。
	配置简单，适合希望快速上手的用户。
	易于维护，与Emacs其他功能兼容性好。
    缺点：

	功能相对lsp-mode较少，不支持一些高级功能。
	可定制性较低，可能无法满足所有高级用户的需求。
	对比总结
功能丰富度：
    ccls：专注于C/C++/Objective-C，功能丰富且高性能。
    lsp-mode：功能全面，支持多种语言，适合需要复杂和高级功能的用户。
    eglot：功能相对基础，但足以满足大部分需求，配置简单。
性能和轻量级：
    ccls：高性能，适合大型C/C++项目。
    lsp-mode：功能全面，但在处理大型项目时可能会影响性能。
    eglot：轻量级，性能较好，适合一般项目。
配置难度：
    ccls：需要配置，但一旦配置好后使用方便。
    lsp-mode：配置复杂，但提供详细文档，适合喜欢定制化的用户。
    eglot：配置简单，开箱即用，适合初学者。
#+end_quote


** program相关

*** XREF
#+begin_quote
xref 是 Emacs 内置的一个用于交叉引用（Cross Reference）的库。它提供了一套标准的接口，用于在代码中查找定义、引用和符号等相关信息。xref 可以用于多种编程语言，并且可以与不同的语言服务器（如 LSP、ccls 等）集成，提供更强大的代码导航和查询功能。

通过 xref，你可以：

查找定义（Find Definition）：在代码中查找某个符号的定义位置。
查找引用（Find References）：查找某个符号在代码中的引用位置。
跳转到定义（Go to Definition）：快速跳转到某个符号的定义位置。
跳转到引用（Go to References）：快速跳转到某个符号的引用位置。
列出符号（List Symbols）：列出当前缓冲区中所有的符号。
列出引用（List References）：列出当前符号的所有引用位置。
更新索引（Update Index）：更新代码的索引信息，以便更快地进行查询和导航。
#+end_quote

*** dap-mode
"Debug Adapter Protocol"，它是一种与语言服务器通信的协议，用于在不同的编辑器和开发环境中进行调试。
#+begin_quote
dap-mode 是一个在 Emacs 中进行调试的扩展，它提供了一个现代化、交互式的调试体验。dap-mode 的名称来自 "Debug Adapter Protocol"，它是一种与语言服务器通信的协议，用于在不同的编辑器和开发环境中进行调试。
以下是 dap-mode 的一些特点和功能：
多语言支持：
    dap-mode 支持多种编程语言的调试，包括 C/C++、Python、JavaScript、Java 等。它可以与不同的调试器（如 GDB、LLDB、Python Debugger 等）集成，提供统一的调试接口。
图形化界面：
    dap-mode 提供了一个图形化的调试界面，允许用户在 Emacs 中直观地查看调试信息、变量值、调用栈等。这种界面使得调试过程更加可视化和交互式。
智能断点设置：
    dap-mode 可以根据代码上下文自动设置断点，或者根据用户指定的条件设置断点。这样可以减少手动设置断点的工作量，提高调试效率。
快速导航：
    dap-mode 允许用户在代码中快速导航到定义、引用和符号等位置。用户可以通过简单的快捷键操作，快速跳转到感兴趣的代码位置。
灵活配置：
    dap-mode 提供了丰富的配置选项，允许用户根据需要自定义调试器、调试参数、调试模板等。这使得 dap-mode 可以适应不同的项目和开发环境。
与 LSP 集成：dap-mode 可以与 Language Server Protocol (LSP) 集成，允许用户在语言服务器的基础上进行调试。这样可以提供更强大的代码导航和调试功能。

总的来说，dap-mode 是一个功能强大、灵活性高的调试工具，它为 Emacs 用户提供了一个现代化、交互式的调试体验。无论是调试 C/C++、Python、JavaScript 还是其他语言的程序，dap-mode 都能够帮助用户快速定位问题并进行调试。
#+end_quote

*** DEBUGGER-调试器
调试器是程序调试最终起作用的东西
#+begin_quote
常用的调试器有很多种，以下是其中一些常见的调试器及其简要介绍：
GDB (GNU Debugger)：
    GDB 是 Linux 和许多 Unix 系统上最常用的调试器，它支持多种编程语言，包括 C、C++、Ada、Fortran、Go 等。GDB 具有强大的功能，可以让开发人员设置断点、单步执行代码、查看变量和内存等。
LLDB (LLVM Debugger)：
    LLDB 是由 LLVM 项目提供的调试器，它是 GDB 的替代品，设计用于替代 GDB，并提供更现代化的调试体验。LLDB 具有与 GDB 类似的功能，但它的代码更加模块化和易于扩展。
Python Debugger (pdb)：
    pdb 是 Python 的内置调试器，用于调试 Python 程序。它允许开发人员设置断点、单步执行代码、查看变量值等，与 Python 解释器集成紧密，可用于调试 Python 脚本和程序。
Java Debugger (jdb)：
    jdb 是 Java 的命令行调试器，用于调试 Java 程序。它允许开发人员在 Java 虚拟机中设置断点、单步执行代码、查看变量和堆栈等。
Visual Studio Debugger：
    Visual Studio 提供了强大的集成开发环境（IDE）和调试器，用于开发和调试 Windows 平台上的应用程序。Visual Studio Debugger 提供了丰富的调试功能，包括断点、数据可视化、多线程调试等。
Eclipse Debugger：
    Eclipse 是一种流行的开发环境，提供了 Java、C/C++、Python 等多种编程语言的调试支持。Eclipse Debugger 提供了与 Eclipse IDE 集成的调试功能，用于调试不同语言的程序。
#+end_quote

*** DAP-依赖的调试器
和lsp一样,dap协议也需要一个服务的支持,也就是调试器,相当于后端服务
但是dapmode需要依赖lldb调试,而且是一个能和dap交互的lldb,因此不能是纯lldb,
一般是vscode专用的lldb,这里使用codelldb,but no use;


** C语言常用操作
1. lsp-rename 重命名光标下的符号
2. 实现函数原型实现
3. 代码调试
4. 打断点
   代码编
5. 代码运行

   #+begin_quote
 代码补全
快捷键：M-/
函数：company-complete

跳转到定义
快捷键：M-.
函数：lsp-find-definition

返回到上一个位置
快捷键：M-,
函数：xref-pop-marker-stack

查看文档
快捷键：C-c C-d
函数：lsp-describe-thing-at-point

查找引用
快捷键：C-c C-r
函数：lsp-find-references

重命名符号
快捷键：C-c C-r
函数：lsp-rename

显示错误和警告
快捷键：M-g n
函数：flycheck-next-error
快捷键：M-g p
函数：flycheck-previous-error
快捷键：C-c ! l
函数：flycheck-list-errors

悬停提示
快捷键：C-c C-i
函数：lsp-ui-doc-show

代码格式化
快捷键：C-M-\
函数：indent-region
快捷键：M-x lsp-format-buffer
函数：lsp-format-buffer

注释和取消注释
快捷键：M-;
函数：comment-dwim

编译
快捷键：M-x compile
函数：compile

运行程序
快捷键：M-!
函数：shell-command
快捷键：M-x shell-command
函数：shell-command 
   #+end_quote


#+begin_src C
  #include <stdio.h>

  int main() {
  
      printf("hello world");
      printf("hello world2");
      printf("hello world3");

  }
#+end_src

#+RESULTS:
: hello worldhello world2hello world3


** 代码调试解决方案
由于没发正确和lldb配合,M1芯片也没发安装gdb就进入了一个很尴尬的境地;要么我使用window环境搭建一套emacs,但是会耗费更多时间,而且不知道效果如何
或者使用Linux环境,或许有时间再进行尝试,最近一段时间也不会进行c开发,只有再专门的ide上面完成了;编辑器的配置也就先暂停,继续lisp的学习;

只能手动原生在shell界面使用lldb进行调试,下面记录一下基本的流程;

放弃了macOS下面的emacs调试,真的得不偿失,试了很多方案,自己编译lldb-mi vscode插件的lldb,codelldb但是都不理想,没发好好的进行交互
那就先这样吧, 也没有办法,后续调试只能使用别的专业的编辑器了;

