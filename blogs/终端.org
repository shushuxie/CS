
** 终端是什么
#+begin_quote wiki
终端（英语：Computer terminal），是一台电脑或者计算机系统，用来让用户输入数据，及显示其计算结果的机器，
简而言之就是人类用户与计算机交互的设备。终端有些是全电子的，也有些是机电的。
其又名终端机，它与一部独立的电脑不同，但也是电脑组成的部分。
#+end_quote
终端就是早期和计算机交互的工具，具有输入和输出功能，例如早起的tty（电传打字机）就可以输入命令并且可以打印返回过来的内容
后来发展的带有屏幕的终端，使用屏幕显示输入和输出

** 终端发展历程
终端的发展历程是计算机历史的重要组成部分，从早期的机械设备到现代的虚拟终端模拟器，
终端技术经历了多次变革和进化。以下是终端发展历程的一个概要总结：

1. 早期机械终端
   电传打字机（Teletypes, TTYs）
   时间：20世纪初到1960年代
   特点：
   机械设备，类似于打字机。
   用户可以通过键盘输入数据，输出以打印在纸带上。
   常用于电报和早期计算机与用户的交互。
   作用：
   提供早期计算机与人之间的输入和输出接口。
2. 视频显示终端（VDTs）
    CRT 显示终端
    时间：1960年代末至1980年代
    特点：
    使用阴极射线管（CRT）显示器取代纸带打印，实现更实时的交互。
    显示屏和键盘集成在一个设备中。
    支持文本显示和光标控制（如 DEC VT系列）。
    作用：
    提高了用户与计算机之间的交互速度和效率，适合长期使用和复杂操作。
3. 终端仿真和图形用户界面（GUI）的兴起
    终端仿真器和虚拟终端（Terminal Emulators）
    时间：1980年代至今
    特点：
    终端仿真器在计算机软件中模拟传统终端设备的行为。
    在操作系统的图形用户界面（GUI）内运行，通过窗口提供命令行界面。
    支持多种 Shell（如 Bash、Zsh、Fish）。
    提供多标签页、多窗口、分屏等功能。
    应用：
    使得在多个环境和操作系统上更容易运行和管理命令行会话。
4. 现代终端和远程访问
    远程终端和 SSH
    时间：1990年代至今
    特点：
    通过网络协议（如 Telnet、SSH）远程访问计算机。
    提供安全的远程命令行访问，广泛用于服务器管理和远程开发环境。
    应用：
    远程终端使得管理和操作远程计算机系统变得更加方便和安全。
    高度定制化和多功能终端
    时间：2000年代至今
    例子：
    iTerm2（macOS）
    GNOME Terminal、KDE Konsole（Linux）
    Windows Terminal（Windows）
    特点：
    丰富的自定义选项（配色方案、快捷键、字体设置等）。
    插件和扩展支持（如 Oh My Zsh）。
    高度集成的开发工具和脚本语言支持（如 VS Code 内置终端）。
    应用：
    支持高级用户和开发人员的高效工作流和复杂操作。
5. 基于浏览器的终端和云服务
    Web 终端
    时间：2010年代至今
    特点：
    基于浏览器的终端访问，提供随时随地的命令行界面。
    集中管理云服务器和远程资源（如 AWS CloudShell、Google Cloud Shell）。
    支持实时协作和共享会话。
    应用：
    增强了团队协作和云环境的管理，提供灵活的远程工作和开发解决方案。
终端发展历程总结
早期机械终端（TTYS）：提供了基本的输入输出功能，是人机交互的起点。
视频显示终端（VDTs）：提高了交互速度和使用效率，支持更多复杂操作。
终端仿真器：在图形界面内模拟终端行为，广泛应用于各种操作系统中。
远程终端和 SSH：实现了安全、远程访问，极大便利了远程计算机管理和开发。
现代多功能终端：提供丰富的自定义选项和高级功能，支持高效的开发和运维工作。
Web 终端和云服务：通过浏览器提供终端访问，增强了灵活性和协作性，适应了云计算和远程工作的需求。
终端技术的发展见证了计算机从单机操作向网络化、分布式和高度集成发展的过程。每一步的进化都使得人们与计算机之间的交互变得更加高效和便捷。

** CLI command line
接受用户输入的命令并且进行解析；会调用shell或者用户外部程序执行
我们也可以自己编写命令程序，放入到bin文件夹，开启执行权限就行；
=/bin= =/usr/bin= 
** Shell
Shell 是一种命令行解释器，用于与操作系统进行交互。它接收用户输入的命令并执行相应的操作。Shell 通常在命令行界面（CLI）中使用，
可以在Linux、Unix以及Windows系统中找到不同类型的Shell。
常见的Shell包括 Bash、Zsh、Csh、Ksh 等等。以下是对一些常见的Shell的具体介绍：

Shell
Shell 是一个统称，包含了许多不同类型和实现（如：Bash、Zsh）。其主要任务是读取和执行用户的命令。

1. Bash (Bourne Again Shell)
    Bash 是 GNU 项目为替代 Unix Bourne Shell (sh) 而开发的 Shell，已成为 Linux 和类 Unix 系统上最常用的 Shell。特点包括：

    强大的编程功能。
    脚本编写能力。
    默认在很多Linux发行版（如Ubuntu）中作为标准的Shell。
2. Zsh (Z Shell)
    Zsh 是另外一种功能强大的 Shell。与 Bash 类似，但提供了更多的功能和扩展：

    更好的自动补全。
    更强的脚本编写能力。
    丰富的主题和插件系统（如 Oh My Zsh）。
3.Other Shells
    Csh (C Shell)：由 Bill Joy 在加州大学伯克利分校开发，具有类似C语言的语法。
    Tcsh：是 Csh 的增强版。
    Ksh (Korn Shell)：由 David Korn 开发，结合了 Csh 和 Bourne Shell 的功能。
4. Git Shell
    Git Shell 是一个专用于 Git 的 Shell 环境，在安装了 Git 的 Windows 系统中可能会见到。它为用户提供了一个预配置的环境，方便使用 Git 命令。

5. PowerShell
    PowerShell 是由微软开发的命令行界面和脚本语言，广泛用于 Windows 系统管理。其具有强大的功能和丰富的对象处理能力。

6. Fish (Friendly Interactive Shell)
    Fish 是一款用户友好的 Shell，提供了颜色高亮、自动补全以及智能建议等特点，旨在提供用户友好的交互体验。

总结
Shell 是一个与操作系统交互的命令行解释器的统称，包含多个实现。
Bash 是 GNU 项目开发的一个广泛使用的 Shell。
Zsh 是一个功能丰富、可扩展的 Shell。
Git Shell 是一个专门为 Git 命令行操作预配置的 Shell 环境，常见于 Windows 上的 Git 安装包中。
PowerShell 是微软开发的用于 Windows 系统管理的强大 Shell，也可用于跨平台。
Fish 是一种以用户友好为目标设计的 Shell。
这些Shell都各有优缺点，具体选择哪一种取决于个人需求和工作环境。不同的Shell可以在同一系统上共存，并且用户可以根据需要切换使用。

** Shell Terminal CLI关系
CLI是Command Line 也就是命令行，可以输入shell命令的地方
Shell 是命令行解释器，用来翻译输入的命令和计算机内核交互
Terminal 现在是终端模拟软件，提供一个界面，可以输入命令行和shell交互;

** windows下的shell
windows不同于Linux或Unix系统有自己的shell，例如CMD和powerShell；
cmd是很老的命令行工具，powerShell是新开发的两个都有个自的shell命令；

*** 脚本介绍
cmd 和 PowerShell 都可以通过编写脚本来自动化任务和执行一系列命令。
它们使用不同的脚本语言和文件扩展名。

1. cmd 脚本
    ~语法~
    cmd 使用一种叫做批处理文件（Batch file）的脚本语言，这种语言的语法较为简单，类似于老式的 DOS 命令。
    #+begin_src cmd
    变量：使用 % 符号来引用和定义变量。
    SET MY_VAR=Hello
	ECHO %MY_VAR%
	条件语句：使用 IF 进行条件判断。
	IF "%MY_VAR%"=="Hello" (
		ECHO The variable is Hello

    ) ELSE (
	ECHO The variable is not Hello

    )
    循环语句：使用 FOR 来进行循环。
    FOR %%G IN (1 2 3) DO (
	    ECHO %%G

    )
    #+end_src

    ~文件~
    批处理脚本文件扩展名通常为 .bat 或 .cmd。
    #+begin_src cmd
    @ECHO OFF
    REM This is a comment
    SET MY_VAR=Hello
    ECHO %MY_VAR%
    #+end_src

    你可以通过双击 .bat 文件或在命令提示符下运行 test.bat 来执行这个脚本。

2. PowerShell 脚本
   ~语法~
   PowerShell 是一种功能强大的脚本语言，基于 .NET Framework/.NET Core，支持面向对象编程和丰富的命令集。
   #+begin_src powerShell
   变量：使用 $ 符号来引用和定义变量。
   $myVar = "Hello"
    Write-Output $myVar
    条件语句：使用 if 进行条件判断。
    if ($myVar -eq "Hello") {
	    Write-Output "The variable is Hello"

    } else {
    Write-Output "The variable is not Hello"

   }
   循环语句：使用 for, foreach, while 等进行循环。
   foreach ($i in 1..3) {
    Write-Output $i

   }
   管道：管道 (|) 可以将一个命令的输出传递给另一个命令。
   Get-Process | Where-Object { $hine，但要注意安全性。}
   #+end_src

   ~文件~
   PowerShell 脚本文件扩展名为 .ps1。

   # This is a PowerShell script
   $myVar = "Hello"
   Write-Output $myVar
   你可以通过在 PowerShell 控制台或 PowerShell ISE 中运行 .\test.ps1 来执行这个脚本。

   执行脚本
   执行 PowerShell 脚本时，可能需要调整执行策略（Execution Policy）以允许脚本运行。可以使用以下命令临时允许执行脚本:

   Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process
   对于持久更改，使用 -Scope CurrentUser 或 -Scope LocalMachine，但要注意安全性。

3. PowerShell为什么命名 ~ps1~
   PowerShell 脚本文件的扩展名为 .ps1，这个 1 主要出于历史原因和命名规范的考虑。

   历史背景与命名规范
   当 PowerShell 最初被开发出来的时候，它被命名为 "Monad"，其文件扩展名为 .msh1，表示 Monad shell 脚本。
   这个 1 代表这是 Monad Shell 脚本的版本号。因此，扩展名中的 1 原本用于版本控制。
   后来，Monad 被重命名为 PowerShell，随之而来的文件扩展名也改为了 .ps1。

   版本控制的考虑
   虽然现代 PowerShell 脚本使用 .ps1 作为扩展名，但是这个 1 并不是严格定义的版本号。
   在 PowerShell 的发展和迭代过程中，脚本文件的扩展名没有随着版本的更新而发生变化。
   实际上，PowerShell 的主版本迭代（如从 PowerShell 5.x 到 PowerShell 7.x）主要体现在底层框架和功能增强方面，
   而不是仅仅通过脚本文件扩展名来标识。因此，在日常使用和开发中，.ps1 始终被用作 PowerShell 脚本的标准扩展名，
   无论 PowerShell 引擎的版本如何变化。

   扩展名统一带来的便利
   使用 .ps1 作为统一的扩展名，使得管理员和开发者能够容易地识别 PowerShell 脚本文件。
   这也使得工具和编辑器可以正确地处理和高亮显示这些脚本。

** 杂项
1. 命令行输入tty可以显示tty的编号，新开一个tap页就是开启一个新的终端
    #+begin_src shell
    ➜  ~ tty
    /dev/ttys003
    #+end_src
2. 终端可以切换shell，例如bash，zsh等
   输入bash，zsh等来切换
   #+begin_src shell
     ➜  ~ echo $SHELL
     /bin/zsh
     ➜  ~ echo $0
     zsh
     ➜  ~ bash

     The default interactive shell is now zsh.
     To update your account to use zsh, please run
     
   #+end_src
3. 现在使用的终端都是模拟终端，例如iterm2等



** 参考
[[https://www.rectcircle.cn/posts/terminal-history/][终端的发展历史]]
