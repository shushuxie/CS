** 数据抽象
就像过程一样可以实现复用构造更加抽象的,高阶的过程,甚至还能返回过程; 同样数据也可以实现高阶数据抽象;
使用基本的运算构造出更加高阶的运算; 层层抽象.

** 2.1 数据抽象导引
***** 过 *选择函数* 和 *构造函数* 构建出一个复合数据结构; 每层只管使用当前的类型就好不用考虑别的影响.

*** 2.1.1 实例: 有理数的算数运算
我们定义一个新的有理数的表示计算方式,一个有理数的表示方式是通过 =分子/分母= 得到的.下面我们定义三个过程

     - =(make-rat <n> <d>)= 返回一个有理数,分子是整数呢n,分母是整数d;
     - =(number <x>)= 返回有理数x的分子
     - =(denom <x>)= 返回有理数x的分母


  
**** 基本运算的表示
~现在并不去考虑上面三个函数的实现方式,假设我们已经实现了上面的函数~ 这是一种称为 *按愿望思维* 的方式方式
#+begin_latex
\begin{align}
    &  \frac{\boldsymbol{n_{1}}}{\boldsymbol{d_{1}}} + \frac{\boldsymbol{n_{2}}}{\boldsymbol{d_{2}}} = \frac{\boldsymbol{n_1}\boldsymbol{d_2}+\boldsymbol{n_2}\boldsymbol{d_1}}{\boldsymbol{d_1}\boldsymbol{d_2}} \\ % add
    &  \frac{\boldsymbol{n_{1}}}{\boldsymbol{d_{1}}} - \frac{\boldsymbol{n_{2}}}{\boldsymbol{d_{2}}} = \frac{\boldsymbol{n_1}\boldsymbol{d_2}-\boldsymbol{n_2}\boldsymbol{d_1}}{\boldsymbol{d_1}\boldsymbol{d_2}} \\ % sub
    &  \frac{\boldsymbol{n_{1}}}{\boldsymbol{d_{1}}} \cdot \frac{\boldsymbol{n_{2}}}{\boldsymbol{d_{2}}} = \frac{\boldsymbol{n_1}\boldsymbol{n_2}}{\boldsymbol{d_1}\boldsymbol{d_2}} \\ % mul
    &  \frac{\frac{\boldsymbol{n_1}}{\boldsymbol{d_1}}}{\frac{\boldsymbol{n_2}}{\boldsymbol{d_2}}} = \frac{\boldsymbol{n_1}\boldsymbol{d_2}}{\boldsymbol{d_1}\boldsymbol{n_2}} \\ % div
    &  \frac{\boldsymbol{n_1}}{\boldsymbol{d_1}} = \frac{\boldsymbol{n_2}}{\boldsymbol{d_1}} \iff \boldsymbol{n_1}\boldsymbol{d_2} = \boldsymbol{n_2}\boldsymbol{d_1} % if and only if
\end{align}
#+end_latex

**** 规则表示为相应的过程

#+caption: 加法
#+begin_src emacs-lisp
  (defun add-rat (x y)
      (make-rat (+ (* (number x) (denom y))
                   (* (number y) (denom x))) ;分子
                (* (denom x) (denom y)))) ;分母

#+end_src

#+caption: 减法
#+begin_src emacs-lisp
  (defun sub-rat (x y)
    (make-rat (- (* (number x) (denom y))
		 (* (number y) (denom x)))
	      (* (denom y) (denom x))))
#+end_src

#+caption: 乘法
#+begin_src emacs-lisp
  (defun mul-rat (x y)
    (make-rat (* (number x) (number y))
	      (* (denom x) (denom y))))
#+end_src

#+caption: 除法
#+begin_src emacs-lisp
  (defun div-rat (x y)
    (make-art (* (number x) (denom y))
	      (* (denom x) (number y))))
#+end_src

#+caption: 相等
#+begin_src emacs-lisp
  (defun equal-rat? (x y)
    (= (* (number x) (denom y))
       (* (denom x) (number y))))
#+end_src

#+caption: 举例
#+begin_latex

$$fdjsk$$ veui 
$E=M^3$ haha 
$E=M^3$ haha 

\begin{equation*}

$E = m^2$ 这是一个行内公式

$$E=MC^2$$

	\[ \sum_{i=1}^{n} i = \frac{n(n+1)}{2} \]


$$
\int_{0}^{\infty} e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
$$

\[ x = \textcolor{red}{\Large \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}} \]

					\begin{align*}
					f(x) &= \int_{-\infty}^x e^{-t^2} dt \\
					g(x) &= \sum_{n=0}^\infty \frac{f^{(n)}(0)}{n!} x^n
					\end{align*}

$e=mc^2$ 

					$$e=mc^2$$


\begin{array}{l}   a\mathop{{x}}\nolimits^{{2}}+bx+c=0 方程有两个不相等的是跟\\   \Delta =\mathop{{b}}\nolimits^{{2}}-4ac \\   \left\{\begin{matrix}   \Delta \gt 0\text{方程有两个不相等的实根} \\   \Delta = 0\text{方程有两个相等的实根} \\   \Delta \lt 0\text{方程无实根} \end{matrix}\right.    \end{array} 

这是一个行间公式：
$$
E=mc^2
$$ gjdkrwe



$$E=E^3$$


 \(hahdfdsdf\) 

\begin{equation}                        % arbitrary environments,
x=\sqrt{b} \text{方程有两个不相等的实根}   % even tables, figures, etc
\end{equation} 

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

 veui$abc$ fjdsk $$dfjsk$$ \(fjdskf\) 
 $hfds$ $gsdi$  dfs $fjdk$ gd哈哈

\begin{table}[htbp]
\centering
\caption{Example LaTeX Table}
\label{tab:example}
\begin{tabular}{|c|c|c|}
\hline
\textbf{Column 1} & \textbf{Column 2} & \textbf{Column 3} \\ \hline
Row 1, Column 1   & Row 1, Column 2   & Row 1, Column 3   \\ \hline
Row 2, Column 1   & Row 2, Column 2   & Row 2, Column 3   \\ \hline
\end{tabular}
\end{table}
#+end_latex

#+caption: tupian
#+begin_example

[[file:~/Documents/typora/lisp/images/2024-06-19_23-52-09_screenshot.png]]

#+end_example





**** 序对
序对是lisp语言提供的一种数据结构,通过 *const* 关键字

    - cons只能有两个参数,称为点对
    - cons is ~construct~ 构造
    - car是寄存器的地址部分, ~Contents of Address part of Register~
    - cdr 是寄存器减量部分 ~Contents of Decrement part of Register~  

  
#+caption: base use
#+begin_src emacs-lisp
(setq x (cons 1 2))
(car x)
(cdr x)

#+end_src

#+caption: 嵌套用法
#+begin_src 
(setq x (cons 1 2)) 
(setq y (cons 3 4))
(setq z (cons x y))
(car (car z))
(cdr (cdr z))
#+end_src

**** 序对表示有理数

    #+begin_src emacs-lisp
    (defun make-rat (n d)
	(cons n d))

    (defun nmuer (x) 
    (cons car x))

    (defun denom (x)
	(cdr x))

    (defun print-rat (x)
    (newline)
    (princ (numer x))
    (princ "/")
    (princ(denom x))
    )


    #+end_src

    #+caption: GCD最大公约数
    #+begin_src emacs-lisp
    (defun GCD (a b)
	(if (= 0 b)
	    a
	    (GCD b (% a b))))
    #+end_src


    
**** 练习2.1
   =定义一个make-rat更好的版本可以处理,正数和负数,负数,分母为负数= 
   #+caption:  可以表示负数
   #+begin_src emacs-lisp
     (defun make-rat (n d)
	  (cons n d))

     (defun numer (x)
	 (abs (car x)));取绝对值

     (defun denom (x)
       (cond ((and (> (car x) 0) (> (cdr x) 0)) (cdr x))
	     ((and (> (car x) 0) (< (cdr x) 0)) (cdr x))
	     ((and (< (car x) 0) (> (cdr x) 0)) (-(cdr x)))
	     ((and (< (car x) 0) (< (cdr x) 0)) (-(cdr x)))
	     ))

     (setq test1 (make-rat -1 3))
     (numer test1)
     (denom test1)

   #+end_src


*** 2.1.2抽象屏障
    抽象屏障是这样的, 一层的数据依赖另一层的抽象, 例如: *cons --> make-rat --> add-rat --> 使用数据的程序* 

#+caption: 抽象屏障
[[file:~/Documents/typora/lisp/images/2024-06-22_12-13-25_screenshot.png]]

**** 练习2.2
#+caption:  练习2.2
#+begin_src emacs-lisp
  ;;; code
  (defun make-segment (start-point end-point)
    "定义表达式,嵌套序点"
    (cons start-point end-point))

  (defun start-segment (segment)
    "得到开始的点"
    (car segment))

  (defun end-segment (segment)
    "得到结束的点"
    (cdr segment))

  ;;;点的构造
  (defun make-point (x y)
    "构造一个点"
    (cons x y))

  (defun x-point (x)
    (car x))

  (defun y-point (x)
    (cdr x))

  (defun print-point (p)
    (newline)
    (princ "(")
    (princ (x-point p))
    (princ ",")
    (princ (y-point p))
    (princ ")")
    )

  (setq pa (make-point 3 6))
  (setq pb (make-point 2 8))
  (setq segment-a-b (make-segment pa pb))

  (print-point (start-segment segment-a-b)
  )

  (print-point (end-segment segment-a-b)
  )

#+end_src


**** 练习2.3
实现一种平面矩形的表示,构造和选择函数;

#+caption:  2.3
#+begin_src emacs-lisp

  (defun make-point (x y)
    "构造一个点"
    (cons x y))

  (defun x-point (x)
    (car x))

  (defun y-point (x)
    (cdr x))
  ;; 用一个复合的点表示矩形
  (defun ju-xing (x y)
    "矩形的表示,只需要两个个对角的点即可"
    (make-point x y))
  ;; 两个选择函数,确定长和宽
  (defun length (a)
    (abs (- (x-point (x-point a))
	    (x-point (y-point a)))))
  (defun weight (a)
    (abs (- (y-point (x-point a))
	    (y-point (y-point a)))))
  ;; 求矩形的面具 axb
  (defun mianji (a)
    (* (length a) (weight a)))
  ;; 求矩形的周长
  (defun circle-length (a)
    (* 2 (+ (length a) (weight a))))

  ;; 测试
  (setq x (make-point 2 4))
  (setq y (make-point 4 7))
  (setq a (ju-xing x y))
  (mianji a)
  (abs (- (x-point (x-point a)) (x-point (y-point a))))
  (y-point (x-point a))
  (y-point a)
  (abs (- (x-point (y-point a)) (y-point (y-point a))))

  (circle-length a)

#+end_src



*** 2.1.3 数据意味着什么
数据到底是如何表示的,不仅是别的,同样也能够通过过程来表示数据,这样数据就是对象,对象是过程实现的;
我们给自己定义的有理数下一个定义,对于任意的 ,n,d和选择函数,满足

$$\frac{(numer\: x)}{denom\:x} = \frac{n}{d}$$
只要满足这个公式就是我们定义的有理数,无论底层是如何实现的;


#+begin_src elisp
(setq lexical-binding t)

(defun cons2 (x y)
  (lambda (m)
    (cond ((equal m 0) x)
          ((equal m 1) y))))

(defun car2 (z)
  (funcall z 0))

(defun cdr2 (z)
  (funcall z 1))

(setq test (cons2 24 23))

(message "car: %d" (car2 test))  ; 输出 24
(message "cdr: %d" (cdr2 test))  ; 输出 23
#+end_src

