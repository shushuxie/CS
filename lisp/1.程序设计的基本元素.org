* 程序设计
lisp 全称是list process列表程序，所有的表达式就是一个列表，由括号包裹起来，每个表达式会计算出一个值，不用return；
lisp有很多的方言，Schema，Elisp等等；二者有很多不同的部分，主要是语法方面；
Schema 使用defin命名变量，Elisp使用 =setq= 也就是 set quot的含义;
对于条件表达式，计算结果 =nil= 和 false =t= 和 true是对应的

*习题答案*
[[https://sicp.readthedocs.io/en/latest/][sicp习题答案]]

* emacs执行lisp
1. =C-x C-e= 会执行当前行的表达式，因此定义一个函数然后再运行，需要提前运行一下函数，然后才能调用
2. =M-x= eval-buffer函数会执行当前文件，但是不会打印出结果，必须使用message来打印
3. 运行多个相关联的过程，需要把所有相关过程都送给解释器执行，然后才能调用组合过程

* 一般语法

** 定义变量
 name是变量的名字，body是结果可以是一个表达式
（setq <name> <body>）

** 应用序求值和正则序求值
#+begin_src json
在 Lisp 中，应用序求值（Applicative Order Evaluation）和正则序求值（Normal Order Evaluation）是两种不同的求值策略，它们主要区别在于求值参数的顺序。

1.应用序求值：在应用序求值中，函数的参数在调用函数之前就会被求值。这意味着无论是否需要，所有参数都会被求值，然后结果被传递给函数。这种求值策略确保了每个参数都会被计算，无论是否在函数体内被使用。大多数编程语言都采用这种求值策略，例如 C、Java 等。
2.正则序求值：在正则序求值中，参数只有在必要时才会被求值。也就是说，只有在函数体内需要使用参数时，才会对参数进行求值。这意味着可能会存在未被使用的参数不会被计算。正则序求值通常用于惰性求值或延迟计算的编程语言中，例如 Haskell。

在 Lisp 中，默认的求值策略通常是应用序求值。这意味着，在调用函数时，所有参数都会被求值，然后结果会传递给函数体。
下面是一个示例来说明两种求值策略的区别：
假设有一个函数 f，其定义如下：
(defun f (x y)
  (+ x 1))

如果我们调用这个函数 f 并传递一个表达式作为参数：

3.在应用序求值中，表达式将在调用函数之前就会被求值。因此，无论如何 (+ x 1) 都会被计算，即使 x 未被使用。
4.在正则序求值中，只有在函数体内需要使用参数时，表达式才会被求值。因此，如果 x 未被使用，(+ x 1) 将不会被计算。

总之，应用序求值和正则序求值的主要区别在于参数的求值顺序。应用序求值会在调用函数之前对所有参数进行求值，
而正则序求值只有在需要时才会对参数进行求值。
#+end_src

** 定义过程
（defun <name> (<formal parameters>) <body>）

** 条件表达式

*** condition
cond是一个条件判断表达式,从上到下判断表达式p1--》pn 如果px是真，则ex生效
p1和e1都是一个list表达式
    #+begin_center
    (cond (<p1> <e1>)
	(<p2> <e2>)
	(<pn> <en>))
	"或者使用如下方式，else只能在最后一个表达式生效"
    (cond (<p1> <e1>)
	(<p2> <e2>)
	(else <en>))
    #+end_center

*** if表达式，适用于只有两种结果的判断，是condition的特例，相当于条件表达式
    =(if <predicate> <true> <false>)=

*** 复合express，只判断true or false
    + =（and <e1> <e2> ... <en>）=
    + =(or <e1> <e2> ... <en>)=
    + =(not <e>)=
** 练习1.1 计算表达式的结果
    #+begin_src lisp
    10 ;10

    (+ 5 3 4) ;12

    (- 9 1) ;8

    (/ 6 2) ;3

    (+ (* 2 4) (- 4 6)) ;6

    ;; complex list
    (setq a 3) ;3

    (setq b (+ a 1)) ;4

    (+ a b (* a b)) ;19

    (= a b) ;nil

    (if (and (> b a) (< b (* a b)))
	b
	a) ;4

    (cond ((= a 4) 6)
	((= b 4) (+ 6 7 a));这里b=4满足条件，因此返回后面表达式的值
	(else 25)) ;16

    (+ 2 (if (> b a) b a)) ;b>a成立，因此返回b，b+2=6；

    (* (cond ((> a b) a)
	    ((< a b) b)
	    (else -1))
	(+ a 1)) ;16
    #+end_src
    
** 练习1.2 将表达式转为前缀形式
#+begin_src lisp
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* (- 6 2) (- 2 7)))
#+end_src

** 练习1.3 定义一个过程，返回三个参数中较大两个数的和
#+begin_src lisp
(defun sum-of-two-large (a b c)  
  (cond ((and (<= a b) (<= a c)) (+ b c))  ; 如果a是最小的  
        ((and (<= b a) (<= b c)) (+ a c))  ; 如果b是最小的  
        (else (+ a b))))                      ; 其他情况（即c是最小的）
(sum-of-two-large 2 3 4)
#+end_src


** 实例：采用牛顿法求平方根
#+begin_src lisp
;;求x的开方y的值
;; 像是自然逻辑语言描述过程，然后该过程拆分为许多小的过程
(defun squrt-iter (guss x)
  (if (good_enough? guss x)
	guss
	(squrt-iter (improve_guss guss x)
		    x)))

(defun good_enough? (guss x)
  "guss value 平方和x的误差绝对值是否小于0.01"
  (< (abs (- (* guss guss) x)) 0.001))

(defun improve_guss (guss x)
  "改善下次预测值"
  (average (/ x guss) guss))

(defun average (a b)
  "a和b的平均值"
  (/ (+ a b) 2))

(defun square (x)
  "初始预测值为1.0"
  (squrt-iter 1.0 x))

(good_enough? 1.5 2)
(improve_guss 1.0 2)
(square 2)
(square 9)
#+end_src

** 练习1.7 过大或过小的值影响计算

|       开方计算值 |                  lisp函数结果 |       真实结果 |
|----------------+-----------------------------+--------------|
|              1 |                           1 |            1 |
|            0.1 |                  0.31624556 |  0.316227766 |
|           0.01 |                    0.100325 |          0.1 |
|          0.001 |                    0.041245 | 0.0316227766 |
|                |                             |              |
| 10000000000000 | escessive-lisp-nesting 1602 |   3162277.66 |

可以看到，对于小数0.001就开始出问题，大数超过了嵌套极限
改进后的计算为
#+begin_src lisp
(defun good_enough? (guss x)
  "更改为本次和下次比率"
  (<= (abs (/ (- (improve_guss guss x) guss) guss)) 0.01))
#+end_src

** 练习1.8
改善一下import里面的计算公式即可
#+begin_src lisp
  (/ (+ (/ x (square y)) (* 2 y))
   3)
#+end_src

** 内部定义和块结构
前面求平方根的函数，有许多关联的函数，我们可以把那些辅助过程放入主过程内部，实现
块结构,也就是一个嵌套结构，同时拥有共同参数x只需要在外部定义即可，里面的值可以
引用到；
#+begin_src lisp
  ;; 块结构，单独参数
    (defun square (x)
	(defun squrt-iter (guss x)
	  (if (good_enough? guss x)
		guss
		(squrt-iter (improve_guss guss x)
			    x)))
	(defun good_enough? (guss x)
	  "guss value 平方和x的误差绝对值是否小于0.01"
	  (< (abs (- (* guss guss) x)) 0.001))

	(defun improve_guss (guss x)
	  "改善下次预测值"
	  (average (/ x guss) guss))

	(defun average (a b)
	"a和b的平均值"
	(/ (+ a b) 2))
      "初始预测值为1.0"
      (squrt-iter 1.0 x))
  ;; 块结构，共享参数
    (defun square (x)
      (defun squrt-iter (guss)
	  (if (good_enough? guss)
		guss
		(squrt-iter (improve_guss)
			    x)))
	(defun good_enough? (guss)
	  "guss value 平方和x的误差绝对值是否小于0.01"
	  (< (abs (- (* guss guss) x)) 0.001))

	(defun improve_guss (guss)
	  "改善下次预测值"
	  (average (/ x guss) guss))

	(defun average (a b)
	"a和b的平均值"
	(/ (+ a b) 2))
      "初始预测值为1.0"
      (squrt-iter 1.0 x))

    (good_enough? 1.5 2)
    (improve_guss 1.0 2)
    (square 2)
    (square 9)
#+end_src

* 1.2过程及其产生的计算

** 线性的递归和迭代
=递归= 计算过程由一个推迟的计算链条⛓进行刻画；
=线性递归= 计算链条的长度随着计算值线性增长
=迭代计算过程= 迭代计算过程就是那种其状态可以用固定数目的 *状态变量* 描述的计算过程
同时存在者一套规则描述这些状态变量更新的方式；
=线性迭代= 计算步骤是线性增长的；
 下面给出一个阶乘计算的两种形式

 #+caption: 两种递归方式递归
 #+begin_src lisp
;; 线性递归 n!
;; 计算方式为 n! = n * (n-1)!
(defun factorial (n)
       (if (= n 1)
       n
       (* n (factorial (- n 1)))))

(factorial 6)

;; 迭代递归 n!
;; 计算方式为 n! = 1x2x3...xN,需要使用变量保存计算过程
;; product 每次步骤计算的值, count,下次需要乘的值
(defun factorial_v2 (product count n)
       (if (> count n)
       product
       (factorial_v2
	    (* product count)
	    (+ 1 count)
	    n)))

(factorial_v2 1 1 6)
 #+end_src

 
*** 练习1.9

#+begin_src lisp
(defun my-inc (number)
  "将NUMBER增加1并返回结果."
    (setq number (1+ number)))

(defun my-dec (number)
  "将NUMBER减少1并返回结果."
    (setq number (1- number)))

(defun my-add (a b)
  "自定义加法函数，返回A和B的和."
    (if (= 0 a)
          b
	  (my-inc (my-add (my-dec a) b))))
=======================进行求值=======
(my-add 4 5)
(my-inc (my-add 3 5))
(my-inc (my-inc (my-add 2 5)))
(my-inc (my-inc (my-inc (my-add 1 5))))
(my-inc (my-inc (my-inc (my-inc (my-add (0 5))))))
(my-inc (my-inc (my-inc (my-inc (5)))))
(my-inc (my-inc (my-inc 6)))
(my-inc (my-inc 7))
(my-inc 8)
9
最后的结果是9，是先展开后收缩，线性递归过程
#+end_src>

#+begin_src lisp
(defun plus (a b)
    (defun dec (x)
	(- x 1))
    (defun inc (y)
	    (+ 1 y))
(if (= 0 a)
    b
    (plus (dec a) (inc b))))
==========================进行求值=================
(plus 4 5)
(plus 3 6)
(plus 2 7)
(plus 1 8)
(plus 0 9)
9
最后的结果是9，属于迭代过程
#+end_src>







