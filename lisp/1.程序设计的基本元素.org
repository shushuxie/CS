* 程序设计
lisp 全称是list process列表程序，所有的表达式就是一个列表，由括号包裹起来，每个表达式会计算出一个值，不用return；
lisp有很多的方言，Schema，Elisp等等；二者有很多不同的部分，主要是语法方面；
Schema 使用defin命名变量，Elisp使用 =setq= 也就是 set quot的含义;
对于条件表达式，计算结果 =nil= 和 false =t= 和 true是对应的

*习题答案*
[[https://sicp.readthedocs.io/en/latest/][sicp习题答案]]

* emacs执行lisp
1. =C-x C-e= 会执行当前行的表达式，因此定义一个函数然后再运行，需要提前运行一下函数，然后才能调用
2. =M-x= eval-buffer函数会执行当前文件，但是不会打印出结果，必须使用message来打印
3. 运行多个相关联的过程，需要把所有相关过程都送给解释器执行，然后才能调用组合过程
4. =else= 关键字在elisp语法中不好用,使用 =t=代替

* 一般语法

** 定义变量
 name是变量的名字，body是结果可以是一个表达式
（setq <name> <body>）

** 应用序求值和正则序求值
#+begin_src json
在 Lisp 中，应用序求值（Applicative Order Evaluation）和正则序求值（Normal Order Evaluation）是两种不同的求值策略，它们主要区别在于求值参数的顺序。

1.应用序求值：在应用序求值中，函数的参数在调用函数之前就会被求值。这意味着无论是否需要，所有参数都会被求值，然后结果被传递给函数。这种求值策略确保了每个参数都会被计算，无论是否在函数体内被使用。大多数编程语言都采用这种求值策略，例如 C、Java 等。
2.正则序求值：在正则序求值中，参数只有在必要时才会被求值。也就是说，只有在函数体内需要使用参数时，才会对参数进行求值。这意味着可能会存在未被使用的参数不会被计算。正则序求值通常用于惰性求值或延迟计算的编程语言中，例如 Haskell。

在 Lisp 中，默认的求值策略通常是应用序求值。这意味着，在调用函数时，所有参数都会被求值，然后结果会传递给函数体。
下面是一个示例来说明两种求值策略的区别：
假设有一个函数 f，其定义如下：
(defun f (x y)
  (+ x 1))

如果我们调用这个函数 f 并传递一个表达式作为参数：

3.在应用序求值中，表达式将在调用函数之前就会被求值。因此，无论如何 (+ x 1) 都会被计算，即使 x 未被使用。
4.在正则序求值中，只有在函数体内需要使用参数时，表达式才会被求值。因此，如果 x 未被使用，(+ x 1) 将不会被计算。

总之，应用序求值和正则序求值的主要区别在于参数的求值顺序。应用序求值会在调用函数之前对所有参数进行求值，
而正则序求值只有在需要时才会对参数进行求值。
#+end_src

** 定义过程
（defun <name> (<formal parameters>) <body>）

** 条件表达式

*** condition
cond是一个条件判断表达式,从上到下判断表达式p1--》pn 如果px是真，则ex生效
p1和e1都是一个list表达式
    #+begin_center
    (cond (<p1> <e1>)
	(<p2> <e2>)
	(<pn> <en>))
	"或者使用如下方式，else只能在最后一个表达式生效"
    (cond (<p1> <e1>)
	(<p2> <e2>)
	(else <en>))
    #+end_center

*** if表达式，适用于只有两种结果的判断，是condition的特例，相当于条件表达式
    =(if <predicate> <true> <false>)=

*** 复合express，只判断true or false
    + =（and <e1> <e2> ... <en>）=
    + =(or <e1> <e2> ... <en>)=
    + =(not <e>)=
** 练习1.1 计算表达式的结果
    #+begin_src lisp
    10 ;10

    (+ 5 3 4) ;12

    (- 9 1) ;8

    (/ 6 2) ;3

    (+ (* 2 4) (- 4 6)) ;6

    ;; complex list
    (setq a 3) ;3

    (setq b (+ a 1)) ;4

    (+ a b (* a b)) ;19

    (= a b) ;nil

    (if (and (> b a) (< b (* a b)))
	b
	a) ;4

    (cond ((= a 4) 6)
	((= b 4) (+ 6 7 a));这里b=4满足条件，因此返回后面表达式的值
	(else 25)) ;16

    (+ 2 (if (> b a) b a)) ;b>a成立，因此返回b，b+2=6；

    (* (cond ((> a b) a)
	    ((< a b) b)
	    (else -1))
	(+ a 1)) ;16
    #+end_src
    
** 练习1.2 将表达式转为前缀形式
#+begin_src lisp
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* (- 6 2) (- 2 7)))
#+end_src

** 练习1.3 定义一个过程，返回三个参数中较大两个数的和
#+begin_src lisp
(defun sum-of-two-large (a b c)  
  (cond ((and (<= a b) (<= a c)) (+ b c))  ; 如果a是最小的  
        ((and (<= b a) (<= b c)) (+ a c))  ; 如果b是最小的  
        (else (+ a b))))                      ; 其他情况（即c是最小的）
(sum-of-two-large 2 3 4)
#+end_src


** 实例：采用牛顿法求平方根
#+begin_src lisp
;;求x的开方y的值
;; 像是自然逻辑语言描述过程，然后该过程拆分为许多小的过程
(defun squrt-iter (guss x)
  (if (good_enough? guss x)
	guss
	(squrt-iter (improve_guss guss x)
		    x)))

(defun good_enough? (guss x)
  "guss value 平方和x的误差绝对值是否小于0.01"
  (< (abs (- (* guss guss) x)) 0.001))

(defun improve_guss (guss x)
  "改善下次预测值"
  (average (/ x guss) guss))

(defun average (a b)
  "a和b的平均值"
  (/ (+ a b) 2))

(defun square (x)
  "初始预测值为1.0"
  (squrt-iter 1.0 x))

(good_enough? 1.5 2)
(improve_guss 1.0 2)
(square 2)
(square 9)
#+end_src

** 练习1.7 过大或过小的值影响计算

|       开方计算值 |                  lisp函数结果 |       真实结果 |
|----------------+-----------------------------+--------------|
|              1 |                           1 |            1 |
|            0.1 |                  0.31624556 |  0.316227766 |
|           0.01 |                    0.100325 |          0.1 |
|          0.001 |                    0.041245 | 0.0316227766 |
|                |                             |              |
| 10000000000000 | escessive-lisp-nesting 1602 |   3162277.66 |

可以看到，对于小数0.001就开始出问题，大数超过了嵌套极限
改进后的计算为
#+begin_src lisp
(defun good_enough? (guss x)
  "更改为本次和下次比率"
  (<= (abs (/ (- (improve_guss guss x) guss) guss)) 0.01))
#+end_src

** 练习1.8
改善一下import里面的计算公式即可
#+begin_src lisp
  (/ (+ (/ x (square y)) (* 2 y))
   3)
#+end_src

** 内部定义和块结构
前面求平方根的函数，有许多关联的函数，我们可以把那些辅助过程放入主过程内部，实现
块结构,也就是一个嵌套结构，同时拥有共同参数x只需要在外部定义即可，里面的值可以
引用到；
#+begin_src lisp
  ;; 块结构，单独参数
    (defun square (x)
	(defun squrt-iter (guss x)
	  (if (good_enough? guss x)
		guss
		(squrt-iter (improve_guss guss x)
			    x)))
	(defun good_enough? (guss x)
	  "guss value 平方和x的误差绝对值是否小于0.01"
	  (< (abs (- (* guss guss) x)) 0.001))

	(defun improve_guss (guss x)
	  "改善下次预测值"
	  (average (/ x guss) guss))

	(defun average (a b)
	"a和b的平均值"
	(/ (+ a b) 2))
      "初始预测值为1.0"
      (squrt-iter 1.0 x))
  ;; 块结构，共享参数
    (defun square (x)
      (defun squrt-iter (guss)
	  (if (good_enough? guss)
		guss
		(squrt-iter (improve_guss)
			    x)))
	(defun good_enough? (guss)
	  "guss value 平方和x的误差绝对值是否小于0.01"
	  (< (abs (- (* guss guss) x)) 0.001))

	(defun improve_guss (guss)
	  "改善下次预测值"
	  (average (/ x guss) guss))

	(defun average (a b)
	"a和b的平均值"
	(/ (+ a b) 2))
      "初始预测值为1.0"
      (squrt-iter 1.0 x))

    (good_enough? 1.5 2)
    (improve_guss 1.0 2)
    (square 2)
    (square 9)
#+end_src

* 1.2过程及其产生的计算

** 线性的递归和迭代
=递归= 计算过程由一个推迟的计算链条⛓进行刻画；
=线性递归= 计算链条的长度随着计算值线性增长
=迭代计算过程= 迭代计算过程就是那种其状态可以用固定数目的 *状态变量* 描述的计算过程
同时存在者一套规则描述这些状态变量更新的方式；
=线性迭代= 计算步骤是线性增长的；
 下面给出一个阶乘计算的两种形式

 #+caption: 两种递归方式递归
 #+begin_src lisp
;; 线性递归 n!
;; 计算方式为 n! = n * (n-1)!
(defun factorial (n)
       (if (= n 1)
       n
       (* n (factorial (- n 1)))))

(factorial 6)

;; 迭代递归 n!
;; 计算方式为 n! = 1x2x3...xN,需要使用变量保存计算过程
;; product 每次步骤计算的值, count,下次需要乘的值
(defun factorial_v2 (product count n)
       (if (> count n)
       product
       (factorial_v2
	    (* product count)
	    (+ 1 count)
	    n)))

(factorial_v2 1 1 6)
 #+end_src
 
*** 练习1.9
#+begin_src lisp
    (defun my-inc (number)
	"将NUMBER增加1并返回结果."
	(setq number (1+ number)))

    (defun my-dec (number)
	"将NUMBER减少1并返回结果."
	(setq number (1- number)))

    (defun my-add (a b)
	"自定义加法函数，返回A和B的和."
	(if (= 0 a)
		b
		(my-inc (my-add (my-dec a) b))))
    =======================进行求值=======
    (my-add 4 5)
    (my-inc (my-add 3 5))
    (my-inc (my-inc (my-add 2 5)))
    (my-inc (my-inc (my-inc (my-add 1 5))))
    (my-inc (my-inc (my-inc (my-inc (my-add (0 5))))))
    (my-inc (my-inc (my-inc (my-inc (5)))))
    (my-inc (my-inc (my-inc 6)))
    (my-inc (my-inc 7))
    (my-inc 8)
    9
    最后的结果是9，是先展开后收缩，线性递归过程
    ,#+end_src>

    ,#+begin_src lisp
    (defun plus (a b)
	(defun dec (x)
	    (- x 1))
	(defun inc (y)
		(+ 1 y))
    (if (= 0 a)
	b
	(plus (dec a) (inc b))))
    ==========================进行求值=================
    (plus 4 5)
    (plus 3 6)
    (plus 2 7)
    (plus 1 8)
    (plus 0 9)
    9
    最后的结果是9，属于迭代过程
#+end_src

*** 练习1.10
#+begin_src lisp
     (defun A (x y)
	 (cond ((= y 0) 0)
	       ((= x 0) (* 2 y))
	       ((= y 1) 2)
	       (t (A (- x 1)
			(A x (- y 1))))))

   ;; 根据上面的函数可以得到最后的结果
     (A 1 10) ;1024
     (A 2 4) ;65536
     (A 3 3) ;65536
   ;; 对于这样定义的函数只能使用代入描点的方式得到相应的数据
  1. (A 0 n)
  | n     | 1 | 2 | 3 | 4 |  5 | n  |
  |-------+---+---+---+---+----+----|
  | value | 2 | 4 | 6 | 8 | 10 | 2n |

  2. (A 1 n)
  | n     | 1 | 2 | 3 |  4 |  5 | n   |
  |-------+---+---+---+----+----+-----|
  | value | 2 | 4 | 8 | 16 | 32 | 2^n |

  3. (A 2 n)
  | n     | 1 | 2 |  3 |     4 |     5 | n              |
  |-------+---+---+----+-------+-------+----------------|
  | value | 2 | 4 | 16 | 65536 | 过于大 | 2^2^2(n个2的幂) |
#+end_src



** 树形递归
递归分裂成树形分支,斐波纳切数列
一种自然的方式是树形递归，但是计算量过大，还有一种迭代的过程；
因为所有的递归都是由fib(0) 和fib（1）得到的，最后由这两个量进行迭代可以得到任何我们所需的fib(n);

#+begin_src emacs-lisp
Fib(n) {0 if n = 0}
       {1 if n = 1}
       {Fib(n-1) + Fib(n-2)}
 每个数字的值等于前面两个数字之和,n=0,1除外
 0,1,1,2,3,5,8,13,21...

 lisp语法表示如下:
(defun fbi (n)
   (cond ((= n 0) 0)
       ((= n 1) 1)
	 (t (+ (fbi (- n 1))
	       (fbi (- n 2)))))) 
#+end_src


*** fib的迭代求值
两个变量 a = fib(1),b= bib(0),这两个是基础变量,后续所有的fib(n)都能通过这两个经过一定次数的迭代获取
迭代过程为:
#+begin_center
a <-- a + b
b <-- a
#+end_center
那么迭代列表如下:
| 迭代轮数 | a的值   | b的值 |
|--------+--------+------|
|      0 | F(1)   | F(0) |
|      1 | F(2)   | F(1) |
|      2 | F(3)   | F(2) |
|      3 | F(4)   | F(3) |
|      . | .      | .    |
|      . | .      | .    |
|      . | .      | .    |
|      n | F(n+1) | F(n) |

根据上面的迭代规则,如果想要求fib(7)迭代次数为6轮,此时a的值就为想要的答案;

#+begin_src emacs-lisp
  ;;如何构建lisp过程实现上述迭代?
  ;; 迭代过程需要几个变量不停的进行更新,上述需要 a,b,n三个变量;
  ;; finb(n) need n-1 次的操作
  ;; a的值作为迭代的返回值,因为a的值就是前面两个迭代获取的
  ;; 就是斐波纳切的计算逻辑
  ;; 下面的cond条件改为 if表达式better,two condition
  (defun fib (n)
    (fib-iter 1 0 (- n 1))) ;迭代的初始条件

  (defun fib-iter (a b n)
    (cond ((= 0 n) a) ;n=0返回a作为最后结果
	  (t (fib-iter (+ a b) ;进行迭代求值,a变为a+b
		    a       ;b变为上轮的a
		    (- n 1))))) ;n减小1
#+end_src

这就是两个递归的区别,思维直观的树形递归,迭代思想的递归,想法不同
构造出不同的lisp表达式;

*** 练习1.11
#+begin_src lisp
  ;;直接翻译规则
  (defun FN (n)
    (if (< n 3) n
	(+ (FN (- n 1))
	   (* 2 (FN (- n 2)))
	   (* 3 (FN (- n 3))))))

  (FN 3);4
  (FN 4);11
  (FN 5);25
#+end_src

#+begin_src lisp
  ;; 迭代版本,可以参考Fib思想
  ;; 由基础元素进行迭代得到下一个元素
  ;; 每轮有一个变化规则,得到轮数n

  ;; f(0) = 0;
  ;; f(1) = 1;
  ;; f(2) = 2;
  ;; f(3) = f(2) + 2f(1) + 3f(0);
  ;; f(4) = f(3) + 2f(2) + 3f(1);
  ;; f(3) = f(4) + 2f(3) + 3f(2);

  ;; 将f(2) = a, f(1) = b, f(0) = c;
  ;; f(3) = a + 2b + 3c
  ;; f(4) = (a+2b+3c) + 2a + 3b
  ;; 迭代规则如下:
  ;; a <-- a+2b+3c
  ;; b <-- a
  ;; c <-- b

  (defun FN (n)
    (if (< n 3)
	n
	(fn-iter 2 1 0 (- n 2))))

  (defun fn-iter (a b c count)
    (if (= 1 count)
	(+ a (* 2 b) (* 3 c))
	(fn-iter (+ a (* 2 b) (* 3 c))
		    a
		    b
		    (- count 1)))) 
  (FN 0)
  (FN 3) 
  (FN 4) 
  (FN 5) 
#+end_src

*** 练习1.12
杨辉三角，
#+caption: 递归实现
#+begin_src lisp
  ;; 把各个位置的元素分别看待，col，row 列行表示坐标，有如下性质
  ;; ps(row,col) = ps(row-1,col-1) + ps(row-1,col)
  ;; ps(0,col)或者pa(row,0) 都等于1 ,row=col也为1
  ;; row和col都从1开始

  (defun ps (x y)
    (if (or (= 1 x) (= 1 y) (= x y))
	1
	(+ (ps (- x 1) (- y 1))
	   (ps (- x 1) y)))) 

  (ps 3 3)
  (ps 2 1)
  (ps 3 2)
  (ps 7 4);20

  ;; 真正有意思的是我们只是总结了一些三角形的规律,然后很自然的翻译为过程就可以实现了
#+end_src

#+caption: 迭代实现
#+begin_src lisp
    ;; 迭代版本的计算公式
    ;;阶乘计算公式
  (defun facial (n)
    (fac-iter 1 1 n))
  (defun fac-iter (product count n)
	  (if (> count n)
	  product
	  (factorial_v2
	      (* product count)
	      (+ 1 count)
	      n)))
  ;; 计算公式
  ;;	(rowcol)=row!/col!⋅(row−col)!
 
  (defun yhs (x y)
    (/ (facial (- x 1))
	       (* (facial (- y 1))
		  (facial (- x y)))))  

  (yhs 5 3);6
#+end_src


** 增长阶
描述的计算过程随着计算数值的增大,所需要的资源的变化量;这里资源是动态的,可以是内存,计算的步骤,需要的cpu等等

** 求幂
根据公式 =b^n = b*b^(n-1)= 可以有下面的递归计算方法
b^0=1
#+begin_src lisp
  (defun M (a n)
    (if (= n 0)
	1
	(* a (M a (- n 1)))))


  (M 2 3)
  (M 4 3)
  ;;下面是一个迭代版本,需要迭代n次,每次迭代的值使用一个变量存储

  (defun MD (b n)
    (M-iter b n 1))

  (defun M-iter (b count product)
    (if (= 0 count)
	product
	(M-iter b
		(- count 1)
		(* b product))))

  (MD 2 3)
  (MD 3 3)
#+end_src

有一个更加边界的计算方式,b8 = b4*b4 = b2*b2 * b2* b2 = b*b;

#+begin_src lisp
  (defun fast-expt ( b n)
    (cond ((= n 0) 1)
	  ((even? n) (square (fast-expt b (/ n 2))))
	  (t (* b (fast-expt b (- n 1))))))

  (defun even? (n)
    (if (= 0 (% n 2))
	t
	nil))
  (defun square (a)
    (* a a))

  (even? 3)
  (even? 4)
  (fast-expt 2 4)
  (fast-expt 2 5)
  (fast-expt 2 10)

#+end_src

*** 练习1.16
#+begin_src lisp
  ;; 把迭代和log(n)计算幂的方式结合起来

  (defun fast-expect (b n)
    (fast-iter b n 1))

  (defun fast-iter (b n a)
    (cond ((= n 0) a)
	  ((even? n) (square (fast-iter b
					(/ n 2)
					a)))
	  (t (* b (fast-iter b
			     (- n 1)
			     a)))))
  (defun even? (n)
    (if (= 0 (% n 2))
	t
	nil))

  (defun square (a)
    (* a a))

  (fast-expect 2 3)
  (fast-expect 2 6)
#+end_src

*** 练习1.17
#+begin_src lisp
  ;; 使用加法的过程计算乘法
  ;; 迭代方式

  ;; cal a*b
  (defun fast-plus (a b)
    (plus-iter a b 0))

  (defun plus-iter (a b result)
    (cond ((= 0 b) result)
	  ((even? b) (double (plus-iter a
					(half b)
					result)))
	  (t (+ a (plus-iter a
			     (- b 1)
			     result)))))

  (defun double (x)
    (+ x x))

  (defun half (x)
    (/ x 2))

  (fast-plus 3 4) 
  (fast-plus 4 9)

#+end_src





















** 最大公约数
根据一个思想,a%b = r 那么 GCD(a,b) = GCD(b,r)两个数的公约数等于余数和除数的公约数;
GCD(206,40) = GCD(40,6)
            = GCD(6,4)
	    = GCD(4,2)
	    = GCD(2,0)
	    = 2;
整体看下来就是根据上面的算法不断的进行迭代;

#+begin_src lisp
  (defun GCD (a b)
    (if (= 0 b)
	a
	(GCD b (% a b))))
  
  (GCD 206 40)
  (GCD 64 128)
#+end_src

*** 练习1.20
#+begin_src lisp
  ;; 正则序求值,函数的参数需要的时候才会求值
  (GCD 206 (GCD 40 (GCD 6 (GCD 4 (GCD 2 0)))))
  可以看出最后一次没有进行remind运算,总共是4次调用
#+end_src

** 1.2.6:素数检测
素数是只有被1和自身整除的数,如果有别的因子那么这个数就不是素数;
1. =寻找因子=
   通过从2开始慢慢的一个一个寻找是否有对应的因子存在,找到的最大数是根号n;
   #+begin_src lisp

     (defun square (x)
	 (defun squrt-iter (guss x)
	 (if (good_enough? guss x)
		 guss
		 (squrt-iter (improve_guss guss x)
			     x)))
	 (defun good_enough? (guss x)
	 "guss value 平方和x的误差绝对值是否小于0.01"
	 (< (abs (- (* guss guss) x)) 0.01))

	 (defun improve_guss (guss x)
	 "改善下次预测值"
	 (average (/ x guss) guss))

	 (defun average (a b)
	 "a和b的平均值"
	 (/ (+ a b) 2))
       "初始预测值为1.0"
       (squrt-iter 1.0 x))


     (defun myformat (x)
       "取小数点后两位"
       (format "%.2f" x))
     (myformat (square 9));3.00

     ;; 从2开始寻找最小因子
     (defun smallest-divisor (n)
       (find-divisor n 2))

     (defun find-divisor (n test-divisor)
	     "余数为0,代表可以除尽"
       (cond ((> (square test-divisor) n) n)
	     ((divides? test-divisor n) test-divisor)
	     (t (find-divisor n (+ test-divisor 1)))))

     (defun divides? (a b)
       (= (% b a) 0))

     (defun prime? (n)
       (= n (smallest-divisor n)))

     (divides? 2 8)
     (prime? 8);nil
     (prime? 7)
     (smallest-divisor 199);199
     (smallest-divisor 1999);1999
     (smallest-divisor 19999);7
   #+end_src


1. =费马小定理=
   同余,有a,b两个数和素数p.如果两个数处以p的余数相同那么a,b就mol p 同余;
   a==b(mol p) <=等价于=> p可以整除(a-b);这是显然的,ab的余数相同,那么a-b的值就是p的倍数;
   同余类的一些性质,两对同余的数的加减,乘,n次方也同余

   #+begin_export latex
   \begin{align}已知有a\equiv b (mod \;p) \\ c\equiv d (mod\; p) \\
   可以推导出以下关系\\\Rightarrow a\pm c\equiv  b \pm (mod\; p) \\
   a\cdot c\equiv b\cdot d  (mod \;p) \\a^{n}\equiv b^{n} (mod\; p) \end{align}
   #+end_export
   
   #+begin_src lisp
     ;; n为素数,a是小于n的正整数,a的n次方与a模n同余
     ;; a = 3 n = 5
     (* 3 3 3 3 3);243
     (mod 243 5);3
     (mod 3 5);3
   #+end_src

*** 练习1.21

#+begin_src lisp
(smallest-divisor 199);199
(smallest-divisor 1999);1999
(smallest-divisor 19999);7
#+end_src

*** 练习1.22

#+begin_src lisp
  ;; 精确到us级别的格式化字符串
  (defun format-current-time-us ()
    "Format the current time as a human-readable string."
    (let ((current-time (current-time)))
      (format-time-string "%Y-%m-%d %H:%M:%S.%6N" current-time)))

  (format-current-time) 


#+end_src





* 1.3 用高阶函数做抽象
#+begin_quote
人们对于功能强大的程序设计语言有一个必然的要求,就是能为公共模式命名,建立抽象,
而后直接在抽象层次上工作.
#+end_quote

我们还需要一种过程,能以过程作为参数或者返回值,这类能操作过程的过程称为 =高阶过程=
在引用高阶过程的时候,可以使用 ='函数名 或者 #'函数名= 表示高阶过程此处是一个过程参数

=funcall关键字=
如果方法体中调用了参数中的函数(需要调用函数得到结果),需要使用funcall关键字表明是函数调用
否则只需要当作参数往下传入即可

#+begin_src lisp
  (defun cube (x)  
    "计算 x 的立方。"  
    (* x x x))  

  (defun apply-and-add-one (proc x)  
    "应用过程 proc 到 x，然后将结果加1。"  
    (+ 1 (funcall proc x)))  
  (apply-and-add-one 'cube 3)

  ;; 示例：计算 3 的立方然后加 1  
  (setq result (apply-and-add-one 'cube 3))  

  ;; 输出结果  
  (message "The result is: %s" result)
#+end_src

#+caption: 高阶抽象过程
#+begin_src emacs-lisp
  ;; 递归中调用的时候不用加上funcall关键字
  ;; 这时只是参数传递,没有调用,只有在调用的时候才加上关键字

  (defun sum (term a next b)  
    "Sums the results of applying TERM to a sequence of numbers from A to B,  
  inclusive, using NEXT to generate the next number in the sequence."  
    (if (> a b)  
	0  
      (+ (funcall term a)  
	 (sum term (funcall next a) next b))))  

  (defun inc (a)  
    (+ a 1))  

  (defun cube (a)  
    (* a a a))  

  (defun sum-cubs (a b)  
    (sum #'cube a #'inc b))  ; 注意这里使用了 #' 前缀来获取函数对象  

  ;; 调用 sum-cubs 函数计算 1 到 10 的立方和  
  (sum-cubs 1 10);3025
#+end_src

上述例子中的sum就是一个高阶抽象,可以适用不同的sum情形,只是term和next函数适配一下即可
像是一个公有的框架,填充进自己的工具即可;

#+caption: 两个数之间的整数之和
#+begin_src lisp
  ;; 框架
  (defun sum (term a next b)
    (if (> a b)
	0
	(+ (funcall term a)
	   (sum term (funcall next a) next b))))

  (defun inc (x)
    (+ x 1))

  (defun identity (x)
    x)
  (identity 3) 

  (defun sum-identity (a b)
    "表示函数引用的符号"
    (sum 'identity a 'inc b))

  (sum-identity 1 4);10
  (sum-identity 1 10);55
#+end_src

#+caption: 计算圆周率的值
#+begin_src lisp
  ;; 框架函数
  (defun sum (term a next b)
    (if (> a b)
	0
	(+ (funcall term a)
	   (sum term (funcall next a) next b))))

  (defun pi-term (x)
    (/ 1.0 (* x (+ x 2))))
  (defun pi-next (x)
    (+ x 4))

  (defun pi-sum (a b)
    (sum 'pi-term a 'pi-next b))

  (* 8 (pi-sum 1 1000));3.1315926
#+end_src


#+caption: 积分的近似值
#+begin_src lisp
  ;; 框架函数
  (defun sum (term a next b)
    (if (> a b)
	0
      (+ (funcall term a)
	 (sum term (funcall next a) next b))))

  (defun cube (x)
    (* x x x))

  (defun add-dx (x)
    (+ x dx))

  (defun integral (f a b dx)
    (* dx
       (sum f (+ a (/ dx 2.0)) 'add-dx b)));这里f是一个过程
  ;;参数,但是是通过 integral传入过来的,这里f无法标识为一个函数
  ;; 只能在下面的调用过程中标识出来,

  ;; 调用integral函数
  (integral 'cube 0 1 0.01) ;.2499875
  (integral 'cube 0 1 0.001); wrong 
#+end_src

*高阶过程,当作参数传入,如果要在方法体中使用该参数,还是当作普通参数看待,because是从方法中传入的参数,只能通过调用过程标识出参数标识*
#+begin_src elisp
   ;; 这里的f虽然是个过程参数,但是后面用作方法体中,没法标识为参数,是当作普通参数看待的
   ;; 只能在使用integral过程的时候把f重新标识为函数才行
   (defun integral (f a b dx)
     (* dx
	(sum f (+ a (/ dx 2.0)) 'add-dx b)));这里f是一个过程

  ;; 这里的pi-term也是过程,但是没有作为pi-sum的参数,是独立于 =pi-sum=过程的
  ;; 因此可以识别为参数
   (defun pi-sum (a b)
     (sum 'pi-term a 'pi-next b))
#+end_src

** 练习

*** 1.29
#+caption: 个人错误练习
#+begin_src lisp
  ;; 利用辛普森方法的积分计算过程
  (defun cube (x) (* x x x))
  (cube 3)

  (defun h-value (a b n)
    "计算h的值"
    (/ (- b a) n))
  (h-value 2 7 2.0)

  (defun yk (f a b n k)
    "计算yk的值,f是函数"
    (funcall f (+ a (* k (h-value a b n)))))
  (yk 'cube 2 7 2.0 0)

    (defun jiFen (f a b n)
      (* (/ (h-value a b n) 3)
	 (sum f a b n)))

    (defun sum (f a b n)
      (if (= 0 n)
	  (yk f a b n 0)
	  (yk-sum f a b n))) 
  (defun yk-sum (f a b n)
      (+ (yk f a b n 0) (yk f a b n n) (yk-loop-sum f a b n 1 0)))

    (defun yk-loop-sum (f a b n i count)
      (cond ((= i n) count)
	    ((even i) (yk-loop-sum f a b n (+ i 1) (+ count (* 4 (yk f a b n i)))))
	    (t (yk-loop-sum f a b n (+ i 1) (+ count (* 2 (yk f a b n i)))))))

    (defun even (i)
      (if (= 0 (% i 2))
	  t
	  nil))

    (even 3)

  (jiFen 'cube 0 1 1000)
#+end_src

#+caption: 逻辑化思考
#+begin_src lisp
  ;; 清醒的思考


#+end_src


** 1.3.2 用lambda构造过程

lambda构造就是匿名函数,不需要定义函数,因为函数在参数中直接使用,可以直接使用lambda进行构造
不惜使用defun定义一个新的函数;
表达式最好在高阶过程中使用,作为匿名函数更有意义;

#+begin_src lisp

  (defun double (x)
    (* 2 x))
  (defun add (a b)
    (+ (double a) b))

  ;; 上面的方法中需要定一个double函数,如果改用lambda
  ;; 完全不需要
  (defun add3 (a b)  
    (funcall (lambda (x) (+ (* 2 x) b)) a))

  (add3 2 4)
#+end_src


#+begin_src lisp
  ;; 这样可以直接调用表达式了
  ((lambda (x y) (+ x y)) 2 7)
#+end_src

*** 用let创建局部变量

let可以创建局部变量,就是把一个表达式对应为一个变量而已 就像 a = x+y
引用a就是相当于后面的表达式
#+begin_center
;; 一个变量,对应一个表达式
    (let((<var1> <exp1>)
	(<var2> <exp2>)
	.
	.
	.
	(<varn> <expn>))
    <body>)
    body就是要使用表达式的体
#+end_center
方法体也包含在let表达式中,和lambda一样,如果是定义别的函数,也是使用这方法体

#+begin_src lisp
  (let ((a 5)  
	(b 10))  
    (message "The sum of %d and %d is %d" a b (+ a b)))

  (defun test (a b)
    (let ((a (+ 2 a))
	  (b (+ 3 b)))
      (+ a b)))

  (test 2 3)

  (defun tt (a b)
    (let ((a (+ a 3)))
      (+ a b)))

  (tt 3 4)
#+end_src



** 1.3.3过程作为一般性的方法

*** 通过区间折半寻找方程的根
    在一个连续的函数中如果f(a)<0 f(b)>0 那么在[a,b]区间一定有f(x) = 0;

    问题分析: 并不一定会找到一个值恰好等于0,因此要找到一个合适的误差;

    #+begin_src lisp
    (defun search (f neg-point pos-point)
	(defun close-enough? (x y)
	(< (abs (- x y)) 0.001))

	(defun average (x y)
	(/ (+ x y) 2))

	(let ((midpoint (average neg-point pos-point)))
	(if (close-enough? neg-point pos-point) ;;这行是方法体
	    midpoint
	    (let ((test-value (funcall f midpoint))) ;; 这是方法体
		(cond ((positive? test-value)
		    (search f neg-point midpoint))
		    ((negative? test-value)
		    (search f midpoint pos-point))
		    (t midpoint))))))
    (defun positive? (x)
    (> x 0))
    (defun negative? (x)
    (< x 0))

    (defun f (x)
	(+ x 2))
    (defun f2 (x)
	(- (* x x) 8))
    (defun f3 (x)
	(- (* x x x) (* 2 x) 3))

    (search 'f3 1.0 2.0);1.89306640625
    (search 'sin 2.0 4.0);2.000
    (search 'sin 4.0 2.0); 3.14

    ;;上述方法对neg 和pos有限制并不完善
    (defun half-fun-mehod (f a b)
	(let ((a-value (funcall f a))
	    (b-value (funcall f b)))
	(cond ((and (negative? a-value) (positive? b-value));;方法体
		(search f a b))
		((and (negative? b-value) (positive? a-value))
		(search f b a))
		(t (error "values are not opposite sign" )))))

    (half-fun-mehod 'sin 2.0 4.0)
    (half-fun-mehod 'sin 3.2 4.0)
    (sin 3.2)
    #+end_src




    
*** 寻找函数的不动点
函数的不动点就是f(x) = x的点也就是函数和 y=x直线的交点;

#+begin_src lisp
  ;; 设置全局变量
  (setq tolerance 0.00001)

  (defun fixed-point (f first-guess)
    (defun close-enough? (v1 v2)
      (< (abs (- v1 v2)) tolerance))
    (defun try (guess)
      (let ((next (funcall f guess)))
	(if (close-enough? guess next);;方法体
	    next
	    (try next))))
    (try first-guess));;方法体

  (fixed-point 'cos 1.0);;.739

#+end_src
