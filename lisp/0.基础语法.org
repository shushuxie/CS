* 基础语法的学习

** 基本数据类型

1. 表达式和符号（Symbol）
    表达式：Elisp中所有的代码都是表达式（expression）。表达式可以是原子（atom）或列表（list）。
    #+begin_src elisp
	原子：数字、字符串、符号等。
	列表：由一对括号包围的一系列表达式。
	示例：(+ 1 2) 是一个包含三个元素的列表，其中第一个元素是函数符号 +，其余两个是参数。
	符号：符号是用来引用变量和函数的名称。

	定义符号：(setq my-var 10)，这里 my-var 是一个符号，它的值被设定为 10。
	获取符号的值：只需要在表达式中使用符号名即可，如 my-var。
	#+end_src

2. 数据类型
    数字（Numbers）：Elisp 支持整数和浮点数。
    #+begin_src eslip
	示例：42，3.14
	字符串（Strings）：由双引号包围的一串字符。
	示例："Hello, World!"
	列表（Lists）：由一对括号包围的零个或多个表达式。列表是Elisp的基础数据结构。
	示例：(1 2 3)，("a" "b" "c")
	向量（Vectors）：与列表类似，但使用方括号表示。
	示例：[1 2 3]
    #+end_src

3. 基本操作
   #+begin_src lisp
    算术运算
	加法：(+ 1 2 3) 返回 6
	减法：(- 5 2) 返回 3
	乘法：(* 2 3 4) 返回 24
	除法：(/ 10 2) 返回 5
    字符串操作
	拼接：(concat "Hello, " "World!") 返回 "Hello, World!"
	长度：(length "Hello") 返回 5
	列表操作

    创建列表：(list 1 2 3) 返回 (1 2 3)
    列表长度：(length '(1 2 3)) 返回 3
    取第一个元素：(car '(1 2 3)) 返回 1
    取剩余元素：(cdr '(1 2 3)) 返回 (2 3)
   #+end_src

4. 向量和列表的区别

   1. 列表（List）
	+ 定义：列表是一种链表结构，每个元素包含指向下一个元素的引用。
	+ 表示：用括号 () 表示，元素之间用空格分隔。
	+ 访问：访问速度较慢（O(n)），特别是对中间元素进行访问时。
	+ 可变性：可以动态地增长和收缩，适合频繁插入和删除操作。

   2. 向量（Vector）
	+ 定义：向量是一种数组结构，元素在内存中连续存储。
	+ 表示：用方括号 [] 表示，元素之间用空格分隔。
	+ 访问：访问速度快（O(1)），因为可以通过索引直接访问任意元素。
	+ 可变性：长度固定，不能动态地增长和收缩。


** 函数
    1. 函数的定义和调用
       1. 定义函数
	   在Elisp中，使用 defun 来定义函数。基本语法如下：
	   #+begin_src lisp
	   (defun function-name (arguments)
	   "Optional documentation string."
	   (body))

	   function-name 是函数的名称。
	   arguments 是一个参数列表，可以为空。
	   "Optional documentation string." 是可选的文档字符串，用于描述函数的作用。
	   (body) 是函数的主体，包含要执行的代码。
	   #+end_src

       2. 调用函数
	   使用函数名加上参数来调用函数：
	   #+begin_src lisp
	   (say-hello "Emacs")  ;; 输出 "Hello, Emacs!"
	   #+end_src

       3. 匿名函数（Lambda表达式）
	   *匿名函数是没有名字的函数，使用 lambda 表达式来定义和使用。*
	   基本语法如下：
	   #+begin_src lisp
	   (lambda (arguments)
	   (body))

	   (setq my-func (lambda (x y)
			   (+ x y)))
	   (funcall my-func 2 3)  ;; 结果：5
	   在这个示例中，我们定义了一个匿名函数并将其赋值给变量 my-func，然后使用 funcall 来调用它。
	   #+end_src

	    
    2. 函数参数和返回值
	*函数可以接受多个参数，也可以有可选参数和可变参数。*

	1. 可选参数
	    #+begin_src lisp
	    (defun add-numbers (x y &optional z)
	    "Add two or three numbers."
	    (if z
		(+ x y z)
		(+ x y)))

	    (add-numbers 1 2)      ;; 结果：3
	    (add-numbers 1 2 3)    ;; 结果：6
	    &optional  表示可选参数。如果未提供 z，则其值为 nil。
	    #+end_src
	2. 可变参数
	    *使用 &rest 来表示可变参数，可以传递任意数量的参数*
	    #+begin_src lisp
	    (defun sum-all (&rest numbers)
	    "Sum all the NUMBERS."
	    (apply '+ numbers))

	    (sum-all 1 2 3 4)  ;; 结果：10
	    &rest 参数将所有传递的参数收集到一个列表中。
	    #+end_src
	3. 函数返回值
	    函数的返回值是最后一个表达式的值。你也可以显式地使用 return 来返回某个值。
	    #+begin_src lisp
	    (defun multiply (x y)
	    "Multiply two numbers."
	    (* x y))

	    (multiply 3 4)  ;; 结果：12
    #+end_src

