* 什么是应用层

=网络应用是计算机网络存在的理由，如果我们不能构想出任何有用的应用，也就没有任何必要去设计支持它们的网络协议了；=
应用层就是我们使用的一些网络应用，软件；微信，游戏，浏览器，视频网站等等；

* 2.1 应用层协议原理

让应用之间的通信脱离系统和语言的限制，只要实现相应的协议就可以进行通信；

** 2.1.1 应用程序体系结构
分为两种， *客户-服务器体系结构(client-service architecture)* 和 *P2P*
客户服务器是一放发起请求，一放相应有一个主体，P2P是相同的主体，平等关系

** 2.1.2 进程通信
程序在操作系统运行是以进程的状态存在，通信就是进程间的通信
*套接字是应用程序进程和运输层协议之间的接口* 

1. 客户和服务器进程
   通信都是成对存在的，在一对进程之间的通信会话场景中，发起通信的进程被标识为客户，等待联系的是服务器；
2. 进程与计算机网络之间的接口
   =进程通过套接字的接口向网络发送报文和从网络接收报文= 套接字就是程序使用操作系统网络功能的一个接口
    #+begin_quote
    套接字（Socket）是在计算机网络中用于实现进程间通信的一种机制，它提供了一套通用的编程接口，
    允许应用程序通过网络进行数据传输。套接字是网络编程的基础，
    常用于实现不同计算机之间的通信，也可以在同一台计算机的不同进程之间进行通信。
    #+end_quote
3. 进程寻址
   进程通信通过IP地址和端口确定通信的具体进程；


** 2.1.3 可供应用程序使用的运输服务
=套接字是应用程序进程和运输层协议之间的接口=
发送端应用程序把报文推进该套接字，接收端运输层协议负责从接收进程的套接字中得到报文；
运输层提供服务的几个方面

1. 可靠数据传输
   数据确保交送到接收侧，不会出现缺少或丢失；
2. 吞吐量
   确保提供rbit/s的速率，等
3. 定时
   信息在多长时间内传送完成
4. 安全性
   加密


** 2.1.4 因特网提供的运输层服务
上述是通用的一些特点，因特网能提供的只有两种协议，TCP，UDP

1. TCP服务
   * 可靠数据传输
   * 面向连接服务，通信之前必须连接
2. UDP服务
   不提供不必要服务的轻量级运输协议，仅提供最小服务


** 2.1.5 应用层协议
这些协议规定了发送报文的一些要求，如何构造报文？报文各个字段的含义？进程何时发送这些报文？

+ 交换的报文类型，例如请求报文和响应报文
+ 各种报文类型的语法，如报文中各个字段及这些字段是如何描述的
+ 字段的语义，字段中信息的含义
+ 确定一个进程何时以及如何发送报文，对报文进行响应的规则。


** 2.1.6 本书设计的网络应用
+ Web应用,HTTP
+ 文件传输，FTP
+ 电子邮件,SMTP
+ 目录服务,DNS
+ 流式视频和P2P

* 2.2 Web和HTTP

** 2.2.1 HTTP概况

=超文本传输协议（HyperText Transfer Protocol，HTTP）= 主要是为了传输网页的
应用层使用HTTP协议，运输层使用TCP或UDP，通过套接字进行传输数据；
HTTP是一个无状态协议，不会记录客户的任何信息，因此后面才有了cookie等功能

** 2.2.2 非持续性连接和持续性连接

HTTP可以记录一个状态，该连接是不是持续的，如果不是请求一次后就会断开，下次需要重新连接
持续性连接就是一直连接 keep-alive；

** 2.2.3 HTTP报文格式

HTTP有两种报文： =请求报文= 和 =响应报文=

1. HTTP请求报文
   #+begin_src http
     GET /somedir/page.html HTTP/1.1
     Host: www.someschool.edu
     Connection: close
     User-agent: Mozilla/5.0
     Accept-language: fr
   #+end_src
   上面报文第一行叫做 =请求行= ，后面的叫做 =首部行（Header line）=
   请求行有3个字段： =方法字段= 、 =URL字段= 和 =HTTP版本字段= ;
   方法包括GET、POST、HEAD、PUT、和DELETE；大部分是GET然后是post；

   #+: caption
   [[file:imag/Snipaste_2023-11-24_22-58-49.png]]

2. HTTP响应报文
   #+begin_src HTTp
     HTTP/1.1 200 ok
     Connection close
     Date Tue, 18 Aug 2015 15:44:04 GMT
     Server: Apache/2.2.3 (Centos)
     Last-Modified: Tue, 18 Aug 2015 15:11:03 GMT
     Content-Length: 6821
     Content-Type: text/html

     (data data data data data ...)
   #+end_src

   #+: caption 响应报文格式
   [[file:imag/Snipaste_2023-11-24_23-04-07.png]]




** 2.2.4 用户与服务器交互：Cookie

cookie是有服务器设置的，用户访问服务器，服务器会设置cookie返回，然后就对这次连接有了记录，
HTTP是一个无状态协议，这样就可以保存状态了

** 2.2.5 Web缓存
=Web缓存也叫代理服务器= 代理的意思就是代替原来的web服务器完成工作，所有叫代理
代理服务器缓存一些常用的请求，距离用户更近，请求响应更快；

#+caption: 缓存服务器图
[[file:imag/Snipaste_2023-11-25_12-11-28.png]]

缓存更新：缓存服务器上面会记录一下最后更新时间，一段时间请求时缓存服务器会询问源服务器对比最后资源的修改时间
如果没有更改就返回原来的，如果更改就替换副本，返回正确资源；

* 2.3 因特网中的电子邮件
#+caption: 电子邮件系统整体描述
[[file:imag/Snipaste_2023-11-25_13-03-39.png]]

邮件代理就是我们的客户端，相当于代替我们发邮件，服务器是邮件服务器，通过SMTP协议进行发邮件；
这个是整体结构，现在我们使用的不是个人服务器，大都用的是公司或者公共服务器。outlook。gmali、foxmail、163、qq等

=邮件访问的流程=
*A通过邮件代理（SMTP）--> 公共邮件服务器（outlook）SMTP--> 公共邮件服务器（gmail）pop3，IMAP--> B邮件代理；*
#+begin_quote
当 Alice 使用 Outlook 发送邮件给 Bob，而 Bob 使用 Gmail 邮箱，并且双方都使用 Outlook 客户端时，整个邮件传递过程可以分为几个步骤：

1. 编写邮件： Alice 打开 Outlook 客户端，创建一封邮件，输入收件人（Bob 的邮箱地址）、主题和正文，然后点击发送。
2. 发件服务器处理： Outlook 客户端通过 SMTP 协议将邮件发送到 Alice 所使用的邮件服务提供商的发件服务器。这个发件服务器负责将邮件传递给 Bob 所使用的邮件服务提供商的服务器。
3. 发件服务器之间的传递： Alice 的邮件服务提供商的发件服务器使用 SMTP 协议将邮件传递给 Bob 所使用的邮件服务提供商的接收服务器。这个过程可能涉及到 MX 记录的查找，以确定接收服务器的地址。
4. 接收服务器接收邮件： Bob 的邮件服务提供商的接收服务器接收到 Alice 发送的邮件，并将其存储在 Bob 的邮箱中。这个过程可以使用协议如 IMAP 或 POP3。
5. Bob 收取邮件： 当 Bob 打开他的 Outlook 客户端时，它会通过 IMAP 或 POP3 协议连接到 Gmail 服务器，从服务器上拉取新的邮件。这样，Bob 就能看到 Alice 发送的邮件。

整个过程中，SMTP（发件服务器之间的传递）和 IMAP/POP3（Bob 收取邮件）是关键的协议。在这个过程中，邮件经过多个服务器的传递，确保了安全、可靠的邮件传递。需要注意的是，Gmail 使用加密（例如 TLS）来保护邮件的传递过程中的数据安全性。
#+end_quote
** 2.3.1 SMTP协议

1. SMTP协议是邮件推送，一个邮件服务器推送到另一个邮件服务器；
2. 协议出现的日期早于HTTP
3. 可以在本地服务器安装postfix软件，形成本地服务器；通过 =telnet 127.0.0.1 25= 进行发邮件


** 2.3.2 与HTTP对比

=相同点= 二者都是传送文件，http是从服务器传送到客户端，邮件是从一个邮件服务器到另一个服务器；
=不同点=
1. http整体来说是一个 =拉协议= ，把文件从服务器拉取到本地，邮件服务是一个 =推协议= ，从一个服务器推到另一个；
2. SMTP要求每个报文采取7bit编码，正常的是8bit；
3. 如何处理一个即包含文本又包含图像的文档；http是把每个对象封装到它自己的http报文中，单独封装；SMTP是把所有对象封装到一个报文当中

   
** 2.3.3 邮件报文格式
#+caption: 报文格式
#+begin_src mail
  From: alice@crepes.fr
  To: bob@hamburger.edu
  Subject: Searching for the metting of life.
#+end_src

** 2.3.4 邮件访问协议

1. SMTP（不是访问协议，是发送协议）
   邮件推送协议，一般是代理用户把邮件推送到邮件服务器，服务器把邮件推送到别的平台服务器上面；
2. =pop3=
   极为简单的邮件访问协议📧；简单但是功能有限；当用户打开代理，就会启用pop3进行拉取邮件
   有两种拉取方式，拉取并删除，拉取并保留，删除会删除原服务器上面的邮件；这样只能有一个移动平台可以获取
   邮件了；
3. =IMAP=
   比pop3有更多功能，更复杂；IMAP把每个报文和一个文件夹联系起来；这样就可以为邮件创建文件夹，
   还有一个重要的功能是允许用户 =获取部分邮件内容=
4. 基于WEB的电子邮件
   用户代理就是浏览器，通过HTTP通信；用户推送邮件到自己的服务器提供商也是使用http，服务器之间仍旧使用SMTP通信；

  
   





* 2.4 DNS: 因特网目录服务
DNS是一个域名服务系统，信息在互联网中传递需要知道具体的主机，主机IP又难以记忆，因此需要一个hostname来标识，这个就是域名；
但是域名和主机不是一一对应的，一个域名是对应多个主机的，需要看具体的配置。
对于人类提供域名，对路由器提供IP，DNS就是协调二者工作的系统；
#+caption: DNS基本概念
#+begin_quote
DNS（Domain Name System）是一个用于将域名（例如 www.example.com）转换为相应 IP 地址的分布式数据库系统。它充当互联网上地址簿的角色，为用户提供了更容易记忆的域名，而不是直接使用 IP 地址连接到网络资源。
以下是DNS的一些关键概念：

1. 域名（Domain Name）： 域名是人们更容易理解和记忆的网站地址，例如 www.example.com。每个域名对应一个唯一的 IP 地址。
2. IP 地址（Internet Protocol Address）： 每个连接到互联网的设备都有一个唯一的 IP 地址，它用于在网络中标识该设备。
3. DNS服务器： DNS 服务器是存储了域名与对应 IP 地址映射关系的服务器。当用户在浏览器中输入一个域名时，计算机首先会查询 DNS 服务器以获取相应的 IP 地址。
4. 域名解析（Domain Resolution）： 这是将用户输入的域名转换为相应 IP 地址的过程。这个过程涉及到查询 DNS 服务器，获取域名与 IP 地址的映射关系。
5. 域名系统层次结构： 域名系统采用了分层次的结构。顶级域（Top-Level Domain，TLD）包括通用顶级域（gTLD）如 ".com"、".org"、国家代码顶级域（ccTLD）如 ".us"、".uk"，以及更低级的域。
6. 域名注册商： 这些是授权注册特定顶级域的机构。用户通过域名注册商注册域名，并且可以通过域名注册商进行域名管理。
7. 递归解析与迭代解析： 递归解析是指 DNS 客户端向 DNS 服务器提出查询请求，并由 DNS 服务器负责查询直到找到所需的信息。迭代解析是指 DNS 客户端向 DNS 服务器提出查询请求，DNS 服务器要么返回所需的信息，要么指导客户端到其他 DNS 服务器查询。
8. DNS缓存： 为了提高性能和减轻 DNS 服务器的负担，DNS 服务器会缓存之前查询的结果，以便在以后的查询中更快地返回结果。

DNS在互联网中扮演着至关重要的角色，它使得用户能够使用易记的域名而不是记住复杂的 IP 地址。
#+end_quote

#+caption: 域名的层级
#+begin_quote
域名系统（Domain Name System，DNS）采用了分层次的结构，这种层次结构使得域名管理和解析更加高效和可扩展。域名系统层次结构的不同部分提供了有关特定域的信息。以下是域名层次结构的主要部分：

1. 根域（Root Domain）：
    根域是DNS层次结构的最高级别。在根域下，没有具体的域名，而是由根服务器（Root Servers）管理。这些根服务器维护了顶级域名服务器（Top-Level Domain Servers）的信息，它们负责管理顶级域名（Top-Level Domains，TLDs）的域名服务器信息。
2. 顶级域（Top-Level Domains，TLDs）：
    顶级域是根域下一级的域名。它们是域名系统中的最高级别的域。TLD可以分为两种主要类型：
3. 通用顶级域（gTLDs）： 通用顶级域包括像.com、.org、.net这样的域名。它们通常代表着某种类别、行业或组织类型。
4. 国家代码顶级域（ccTLDs）： 国家代码顶级域是代表特定国家或地区的域名，例如.us（美国）、.uk（英国）、.cn（中国）等。每个国家都有自己的ccTLD。
5. 第二级域名（Second-Level Domains）：
    第二级域名是位于顶级域下的域名级别。它们是在特定顶级域之下的子域。例如，在.com顶级域下，"example"是一个第二级域名。
6. 子域（Subdomains）：
    子域是位于域名结构更低级别的部分。它们是在较高级别域名之下创建的，用于组织和管理网络资源。例如，在一个网站域名（如www.example.com）中，"www"就是一个子域。

域名系统的这种分层结构允许域名在全球范围内分配并管理，同时也为用户提供了更好的组织和识别网络资源的方式。每个层级都有相应的域名服务器，负责管理和提供对应层级的域名解析服务。
这种结构的灵活性和可伸缩性使得互联网上数以亿计的域名得以顺利运行和管理。
----------
域名www.baidu.com是一个典型的域名，它的结构可以分为以下几个部分：

1.子域（Subdomain）： 在这个域名中，"www"是一个子域。子域通常用于标识特定的服务或资源，例如"www"通常用于指示网站的主页。
2.第二级域名（Second-Level Domain，SLD）： 在这个域名中，"baidu"是第二级域名。第二级域名是域名结构中的核心部分，它通常用于标识特定的组织、品牌或实体。
3.顶级域（Top-Level Domain，TLD）： 在这个域名中，".com"是顶级域。顶级域通常代表着域名的类型、性质或所属国家/地区。".com"是通用顶级域（gTLD），它通常用于商业目的。

因此，域名www.baidu.com的结构可以总结为：

4.子域： www
5.第二级域名： baidu
6.顶级域： .com
整体而言，www.baidu.com代表百度公司的网站，"www"是用于访问其主页的子域，".com"表示这是一个商业性质的域名。这种结构使得用户能够通过易于记忆的方式访问互联网上的不同资源。
#+end_quote

#+caption: 计算机如何获取DNS服务器地址
#+begin_quote
在 macOS 上，您可以使用终端（Terminal）应用程序来查询当前配置的 DNS 服务器地址。以下是一些步骤：

1.打开终端： 您可以在“应用程序” -&gt; “实用工具”文件夹中找到终端，或者使用Spotlight（按下Command + Space，然后输入Terminal）来搜索并打开终端。
2.输入命令： 在终端中，输入以下命令并按回车键：

   scutil --dns

这个命令将显示系统当前的 DNS 配置信息。

3.查看DNS服务器地址： 在输出中，找到 "nameserver" 字段，后面的 IP 地址就是您当前使用的 DNS 服务器的地址。示例输出如下：

   DNS configuration

   resolver #1
     nameserver[0] : 192.168.1.1

在这个示例中，DNS 服务器的地址是 192.168.1.1。
注意：上述命令会显示系统当前的 DNS 配置，但实际上，macOS 通常通过 DHCP（Dynamic Host Configuration Protocol）从您的路由器或网络提供商那里获取 DNS 服务器的信息。因此，如果您的网络使用 DHCP，那么您看到的 DNS 服务器地址可能是由 DHCP 分配的。
如果您希望查看更详细的网络配置信息，您还可以使用以下命令：
networksetup -getdnsservers Wi-Fi

这个命令将显示当前 Wi-Fi 网络连接的 DNS 服务器地址。您可以将 "Wi-Fi" 替换为您正在使用的网络接口的名称，例如 "Ethernet"。

-----

在 Windows 操作系统中，您可以通过几种方式来获取当前配置的 DNS 服务器地址。以下是两种常用的方法：
方法一：使用命令提示符（Command Prompt）

1.打开命令提示符： 您可以按下 Win + R 键，在弹出的运行窗口中输入 cmd，然后按下 Enter 键打开命令提示符。
2.输入命令： 在命令提示符中，输入以下命令并按下 Enter 键：

   ipconfig /all

这个命令将显示当前网络连接的详细信息。

3.查看DNS服务器地址： 在输出中，找到您当前网络适配器的信息（例如以太网适配器、无线局域网适配器等），在其中寻找 "DNS 服务器" 字段，后面的地址即为您当前使用的 DNS 服务器地址。

方法二：使用网络连接设置

4.打开网络连接设置： 点击任务栏右下角的网络图标，选择 "网络和Internet设置"，然后选择 "更改适配器选项"。
5.查看网络适配器属性： 右键点击当前使用的网络适配器（例如 Wi-Fi 或以太网），然后选择 "属性"。
6.查看DNS设置： 在适配器属性窗口中，找到并双击 "Internet 协议版本 4（TCP/IPv4）" 或 "Internet 协议版本 6（TCP/IPv6）"，然后选择 "属性"。
7.查看DNS服务器地址： 在弹出的窗口中，您将看到手动设置的 DNS 服务器地址，或者选择 "自动获取 DNS 服务器地址" 选项，此时将显示从 DHCP 获取的 DNS 服务器地址。

以上方法可以帮助您在 Windows 操作系统中找到当前配置的 DNS 服务器地址。请注意，实际 DNS 服务器地址可能因网络配置方式（手动配置或从 DHCP 自动获取）而有所不同。
#+end_quote

#+caption: msc获取地址例子
#+begin_example
DNS configuration

resolver #1
  search domain[0] : hz.ali.com
  nameserver[0] : 30.30.30.30
  timeout  : 30
  if_index : 6 (en0)
  flags    : Request A records
  reach    : 0x00000002 (Reachable)

resolver #2
  domain   : local
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 300000

resolver #3
  domain   : 254.169.in-addr.arpa
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 300200

resolver #4
  domain   : 8.e.f.ip6.arpa
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 300400

resolver #5
  domain   : 9.e.f.ip6.arpa
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 300600

resolver #6
  domain   : a.e.f.ip6.arpa
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 300800

resolver #7
  domain   : b.e.f.ip6.arpa
  options  : mdns
  timeout  : 5
  flags    : Request A records
  reach    : 0x00000000 (Not Reachable)
  order    : 301000

DNS configuration (for scoped queries)

resolver #1
  search domain[0] : hz.ali.com
  nameserver[0] : 30.30.30.30
  timeout  : 30
  if_index : 6 (en0)
  flags    : Scoped, Request A records
  reach    : 0x00000002 (Reachable)
#+end_example

** 2.4.1 DNS提供的服务
1. =DNS是什么=
   1. 一个由分层的DNS服务器实现的分布式数据库；
   2. 一个使得主机能够查询分布式数据库的应用层协议，DNS通常是运行BIND软件的Unix机器；使用UDP协议，53 port；
2. =提供服务=
   *DNS通常是由其他应用层协议所使用，如HTTP、SMTP和FTP；*
   1) =HTTP域名解析= ，在浏览器输入一个域名地址，会自动解析找到对于ip然后发送请求；
   2) =主机别名= 可以为主机添加别名方便记忆，主机规范名不容易记忆，可以调用DNS系统获取主机别名对应的规范名和IP；
   3) =邮件服务器别名= 个人方便记忆的邮件地址，bob@yahooh.com可以进行DNS解析获取对于服务器的规范名和IP地址方便推送；
      #+begin_quote
      当涉及到邮箱名的DNS解析以获取邮件服务器信息时，系统会执行MX（Mail Exchange）记录的DNS查询。MX记录指定了处理特定域名电子邮件流量的邮件服务器。
	下面是解析邮箱名获取邮件服务器的大致流程：

	1.查询MX记录： 当您发送电子邮件到某个域名时，您的邮件客户端或邮件服务器会进行DNS查询以查找目标域的MX记录。这通常涉及向目标域的DNS服务器发送查询请求，询问关于MX记录的信息。
	2.MX记录内容： MX记录指定了邮件服务器的优先级和域名。优先级用于标识多个邮件服务器之间的首选顺序，数字越低表示优先级越高。域名部分则是指定处理该域名邮件的邮件服务器的地址。
	3.邮件服务器地址： DNS解析返回MX记录，提供一个或多个邮件服务器的域名。接收方的邮件服务器将根据这些记录，按照优先级连接到相应的邮件服务器来接收邮件。
	4.连接至邮件服务器： 邮件服务器会使用获取到的邮件服务器域名，通过SMTP（Simple Mail Transfer Protocol）协议与目标邮件服务器建立连接，以便发送或接收邮件。

	总体而言，邮箱名的DNS解析涉及查询目标域的MX记录，这些记录指定了处理特定域名电子邮件的邮件服务器地址和优先级，从而确保邮件能够正确传递到相应的接收方邮件服务器。
      #+end_quote
   4) =负载分配= 一个IP集合配置在DNS服务器上，每次查询会返回域名对应的不同IP，缓解服务器压力；

      
** 2.4.2 DNS工作机理概述
DNS数据库不能由一个服务器提供所有服务，距离，服务器崩溃，数据库压力都不允许，因此采用了分布式的服务；

1. 分布式、层次数据库
    #+caption: 分布式、层次数据库
    [[file:imag/Snipaste_2023-11-28_15-31-01.png]]

   + *根(DNS)服务器*
   =根名字服务器提供TLD服务器IP地址= ；400多个根服务器分布在全世界，由13个机构管理；
   + *顶级域(DNS)服务器*
   =TLD服务器提供了权威DNS服务器 IP地=
       对于每个顶级域(如com org net edu和gov)和所有国家的顶级域(如uk fr ca和jp), 有TLD服务器(或服务器集群)。Verisign
       Global Registry Services公司 护com顶级域 TLD服务器 Educause公司 护edu顶级域TLD服务器。
   + *权威DNS服务器*
       在因特网上具有公共可访问主机 如Web服务器和邮件服务器 *每个组织机构必须提供公共可访问的DNS记录*  这些记录将这些主机名
       字映射为IP地址。一个组织机构 权威DNS服务器收 了 些DNS 录。一个组织机构 能够选 择实现 它自 己的 权威DNS服务器以保存 这些记 录，另一方法
       是 该组织能够支付费用 让这些 录存储在某个服务提供商 一个权威DNS服务器中。多数大学和大公司实 和 护它们 己基本和 助 备份 权威DNS
       服务器。
   + *本地NDS服务器*
   本地服务器不在层级里面，但是也十分重要； *每个ISP都有一个本地DNS服务器* 也叫默认名服务器，连接时通过DHCP获取DNS解析

   #+caption: DNS服务器查询方式
   [[file:imag/Snipaste_2023-11-28_15-49-09.png]]

   图中使用了 *递归查询* 和 *迭代查询* ；1和8是对贵查询，后面三个主机查询是迭代查询
   二者都可能有，下图是递归查询

   #+caption: DNS递归查询
   [[file:imag/Snipaste_2023-11-28_16-33-18.png]]

   =基本方式就是：首先查询本地，然后从根服务器一级一级迭代查询，直至获取到正确的IP地址=

2. DNS缓存
   常用的ip一般已经缓存服务器里面了，服务器大概两天会过期缓存；可以使用 =dig www.baidu.com= 或 =nslookup www.baidu.com= 等工具查看路由过程；
   #+begin_src bash
     dig example.com
     nslookup example.com
     traceroute example.com
   #+end_src



** 2.4.3 DNS记录和报文
DNS服务器存储了 *资源记录(Resource Record,RR)*, RR提供了主机名到IP地址的映射;
资源记录包含下列字段的4元组：
={Name, Value, Type, TTL}=
TTL是记录的生存时间，决定记录从缓存中删除的时间。Name和value取决于type；例如：
+ type = A，Name是主机名, value是IP地址
+ Type = NS，Name是域, value是权威服务器DNS地址
+ Type = CNAME, value是别名为Name的主机对应的规范主机名
+ Type = MX，value是个别名为Name的邮件服务器的规范主机名

  1. DNS报文
     [[file:imag/Snipaste_2023-11-28_21-24-20.png]]

     + 前12个字节是首部区域，标识符包含此次请求是“查询/回答”
     + 问题区域包含正在查询的信息
     + 回答区域包含对最初请求的名字和资源记录。
     + 权威区域包含了其他权威服务器的记录
     + 附加区域包含了其他有帮助的信息
  2. 在DNS数据库中插入记录
     通过 *注册登记机构* 将数据插入数据库中；以前只有一家机构，现在有许多家名字和地址分配机构通过（ICANN）获得授权，
     然后才能通过DNS解析通过域名访问你所创建的服务器；
       


* 2.5 P2P文件分发
P2P(peer to peer),点对点文件分发；每个对等方可以接收或分发文件的任何部分；
现在使用最多的p2p协议是 =BitTorrent=

1. =P2P体系结构的扩展性=
   对客户-服务器体系来说，分发文件的时间随着客户增加呈线性增长，而P2P是有时间上限的，总是小于一小时；
2. =BitTorrent=
   基本术语
   #+begin_quote
   参与一个特定文件分发的所有对等方的集合称为 *洪流（torrent)* 。
   洪流中对等方彼此下载等长的文件 *块（chunk）* 典型长度为256KB。
   一个对等方首次加入时没有块，随着时间积累会有越来越多的块，当他下载块时也为其他对等方上传块。
   一旦获得全部块就可以选择离开或者继续为其他对等方服务。
   任何对等方可以在任何时候，拥有不同子集的时候选择离开，后面任何时候加入该洪流中。 
   #+end_quote

   每个洪流都有一个基础设施称为 *追踪器（tracker）* 一个新加入的洪流向tracker注册自己，并周期性的报告自己是否仍在洪流中；
   对等方通过tracker就可以知道有哪些对等方，然后就通过P2P协议加入洪流进行文件传输；

* 2.6 视频流和内容分发网
 CDN网络分发系统，就是租用ISP的服务器，把分发的内容存储那里，然后从那里发送到用户的请求当中；
 视频提供商会在服务器中提供不同的清晰度版本，然后根据用户的请求发送不同的版本；

* 2.7 套接字编程：生成网络应用
** 2.7.1 UDP套接字编程
 UDP不需要提前建立连接，服务器运行，直接接收client发送的请求即可；
 通过socket获取的连接可以得到发送请求主机的IP和Port；
 =java idea 打包方式=
 1. idea streature 添加Artifacts jar，给定main位置；源代码模块
 2. 选择artifacts打包（build菜单栏）
 

 1. =JAVA程序实现UDP=
    #+caption: server程序
    #+begin_src java
    package main.java.socket;
    import java.net.DatagramPacket;
    import java.net.DatagramSocket;


    /**
    * datagramPacket是使用UDP协议的一个类，用来创建UDP协议
    * 的服务器
    */
    public class UDPServer {
	public static void main(String[] args) {
	    try {
		// 创建DatagramSocket对象，指定端口号
		DatagramSocket socket = new DatagramSocket(9876);

		// 创建字节数组用于接收数据
		byte[] receiveData = new byte[1024];

		// 创建DatagramPacket对象用于接收数据
		DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);

		System.out.println("UDP Server is running...");
		while (true) {
		    // 接收数据
		    socket.receive(receivePacket);
		    // 处理接收到的数据
		    String receivedMessage = new String(receivePacket.getData(), 0, receivePacket.getLength());
		    System.out.println("Received message: " + receivedMessage);
		    // 关闭Socket
    //                socket.close();
		}
	    } catch (Exception e) {
		e.printStackTrace();
	    }
	}
    } 
    #+end_src

    #+caption: client程序
    #+begin_src java
    package main.java.socket;
    import java.net.DatagramPacket;
    import java.net.DatagramSocket;
    import java.net.InetAddress;

    public class UDPClient {
	public static void main(String[] args) {
	    try {
		// 创建DatagramSocket对象
		DatagramSocket socket = new DatagramSocket();

		// 指定服务器地址和端口号
		InetAddress serverAddress = InetAddress.getByName("124.220.44.241");
		int serverPort = 9876;

		// 创建要发送的数据
		String message = "";
		boolean readFlag = true;
		int len = args.length;
		for (int i=0; i<len; i++) {
		    message += args[i]+" ";
		}

		byte[] sendData = message.getBytes();
		// 创建DatagramPacket对象，用于发送数据
		DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, serverAddress, serverPort);

		// 发送数据
		socket.send(sendPacket);

		System.out.println("Message sent to server: " + message);

		// 关闭Socket
		socket.close();
	    } catch (Exception e) {
		e.printStackTrace();
	    }
	}
    }
    #+end_src

 2. =JAVA程序实现TCP=
    #+caption: server
    #+begin_src java
    package org.example;

    import java.io.*;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class TCPServer {
	public static void main(String[] args) {
	    try {
		// 创建一个 ServerSocket 对象，监听指定端口
		ServerSocket serverSocket = new ServerSocket(8888);

		System.out.println("Server listening on port 8888...");

		// 服务器进入监听状态，等待客户端的连接
		Socket clientSocket = serverSocket.accept();

		// 获取输入流和输出流
		BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
		PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

		// 读取客户端发送的数据
		String clientMessage = in.readLine();
		System.out.println("Received from client: " + clientMessage);

		// 发送响应给客户端
		out.println("Hello from Server!");

		// 关闭连接
		in.close();
		out.close();
		clientSocket.close();
		serverSocket.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }
    #+end_src

    
    #+caption: client
    #+begin_src java
    package org.example;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.io.PrintWriter;
    import java.net.Socket;

    public class TCPClient {
	public static void main(String[] args) {
	    try {
		// 创建一个 Socket 对象，连接到服务器的指定端口
		Socket socket = new Socket("localhost", 8888);

		// 获取输入流和输出流
		BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

		// 发送数据给服务器
		out.println("Hello from Client!");

		// 读取服务器的响应
		String serverMessage = in.readLine();
		System.out.println("Received from server: " + serverMessage);

		// 关闭连接
		in.close();
		out.close();
		socket.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }
    #+end_src
