* 内存的基本结构

#+DOWNLOADED: screenshot @ 2024-11-09 20:38:19
[[file:images/内存的基本结构/2024-11-09_20-38-19_screenshot.png]]

运行逻辑是从class文件,由类加载子系统加载之后形成几个部分包括, =方法区= , =堆区=
~程序计数器~, ~本地方法栈~, ~虚拟机栈~  方法区和堆区是 *线程共享* 其余的部分是 *方法独享*
执行引擎是用来执行编译后的字节码,其中有些部分常用的热点代码,会由jit直接编译为机器码
缓存起来提升执行效率;

#+DOWNLOADED: screenshot @ 2024-11-09 21:07:11
[[file:images/内存的基本结构/2024-11-09_21-07-11_screenshot.png]]

* 类加载子系统

#+DOWNLOADED: screenshot @ 2024-11-09 21:12:43
[[file:images/类加载子系统/2024-11-09_21-12-43_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 21:16:04
[[file:images/类加载子系统/2024-11-09_21-16-04_screenshot.png]]

** 类的加载过程

#+DOWNLOADED: screenshot @ 2024-11-09 21:19:48
[[file:images/类加载子系统/2024-11-09_21-19-48_screenshot.png]]
加载--> 链接 --> 初始化


*** 加载
#+DOWNLOADED: screenshot @ 2024-11-09 21:21:23
[[file:images/类加载子系统/2024-11-09_21-21-23_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 21:23:15
[[file:images/类加载子系统/2024-11-09_21-23-15_screenshot.png]]

*** 链接
#+DOWNLOADED: screenshot @ 2024-11-09 21:25:00
[[file:images/类加载子系统/2024-11-09_21-25-00_screenshot.png]]

=准备阶段会为变量赋值默认值,初始化过程会为变量重新赋值=

把二进制显示为16进制
#+begin_src 
00000000: cafe babe 0000 0033 002c 0a00 0900 2005  .......3.,.... .
00000010: 0000 0000 0000 1f40 0a00 2100 2207 0023  .......@..!."..#
00000020: 0700 240a 0006 0025 0700 2607 0027 0100  ..$....%..&..'..
00000030: 063c 696e 6974 3e01 0003 2829 5601 0004  .<init>...()V...
00000040: 436f 6465 0100 0f4c 696e 654e 756d 6265  Code...LineNumbe
00000050: 7254 6162 6c65 0100 124c 6f63 616c 5661  rTable...LocalVa
00000060: 7269 6162 6c65 5461 626c 6501 0004 7468  riableTable...th
00000070: 6973 0100 124c 6f72 672f 6578 616d 706c  is...Lorg/exampl
00000080: 652f 4d61 696e 3b01 0004 6d61 696e 0100  e/Main;...main..
00000090: 1628 5b4c 6a61 7661 2f6c 616e 672f 5374  .([Ljava/lang/St
000000a0: 7269 6e67 3b29 5601 0001 6501 0020 4c6a  ring;)V...e.. Lj
000000b0: 6176 612f 6c61 6e67 2f49 6e74 6572 7275  ava/lang/Interru
000000c0: 7074 6564 4578 6365 7074 696f 6e3b 0100  ptedException;..
000000d0: 0461 7267 7301 0013 5b4c 6a61 7661 2f6c  .args...[Ljava/l
000000e0: 616e 672f 5374 7269 6e67 3b01 0001 6901  ang/String;...i.
000000f0: 0001 4901 0001 6a01 0001 6b01 000d 5374  ..I...j...k...St
00000100: 6163 6b4d 6170 5461 626c 6507 0016 0700  ackMapTable.....
00000110: 2301 000a 536f 7572 6365 4669 6c65 0100  #...SourceFile..
00000120: 094d 6169 6e2e 6a61 7661 0c00 0a00 0b07  .Main.java......
00000130: 0028 0c00 2900 2a01 001e 6a61 7661 2f6c  .(..).*...java/l
00000140: 616e 672f 496e 7465 7272 7570 7465 6445  ang/InterruptedE
00000150: 7863 6570 7469 6f6e 0100 1a6a 6176 612f  xception...java/
00000160: 6c61 6e67 2f52 756e 7469 6d65 4578 6365  lang/RuntimeExce
00000170: 7074 696f 6e0c 000a 002b 0100 106f 7267  ption....+...org
00000180: 2f65 7861 6d70 6c65 2f4d 6169 6e01 0010  /example/Main...
00000190: 6a61 7661 2f6c 616e 672f 4f62 6a65 6374  java/lang/Object
000001a0: 0100 106a 6176 612f 6c61 6e67 2f54 6872  ...java/lang/Thr
000001b0: 6561 6401 0005 736c 6565 7001 0004 284a  ead...sleep...(J
000001c0: 2956 0100 1828 4c6a 6176 612f 6c61 6e67  )V...(Ljava/lang
000001d0: 2f54 6872 6f77 6162 6c65 3b29 5600 2100  /Throwable;)V.!.
000001e0: 0800 0900 0000 0000 0200 0100 0a00 0b00  ................
000001f0: 0100 0c00 0000 2f00 0100 0100 0000 052a  ....../........*
00000200: b700 01b1 0000 0002 000d 0000 0006 0001  ................
00000210: 0000 0003 000e 0000 000c 0001 0000 0005  ................
00000220: 000f 0010 0000 0009 0011 0012 0001 000c  ................
00000230: 0000 00ad 0003 0005 0000 001e 053c 063d  .............<.=
00000240: 1b1c 603e 1400 02b8 0004 a700 0f3a 04bb  ..`>.........:..
00000250: 0006 5919 04b7 0007 bfb1 0001 0008 000e  ..Y.............
00000260: 0011 0005 0003 000d 0000 0022 0008 0000  ..........."....
00000270: 0006 0002 0007 0004 0008 0008 000a 000e  ................
00000280: 000d 0011 000b 0013 000c 001d 000e 000e  ................
00000290: 0000 0034 0005 0013 000a 0013 0014 0004  ...4............
000002a0: 0000 001e 0015 0016 0000 0002 001c 0017  ................
000002b0: 0018 0001 0004 001a 0019 0018 0002 0008  ................
000002c0: 0016 001a 0018 0003 001b 0000 0013 0002  ................
000002d0: ff00 1100 0407 001c 0101 0100 0107 001d  ................
000002e0: 0b00 0100 1e00 0000 0200 1f              ...........
#+end_src

#+begin_src
00000000: cafe babe 0000 0033 0022 0a00 0600 1409  .......3."......
00000010: 0015 0016 0800 170a 0018 0019 0700 1a07  ................
00000020: 001b 0100 063c 696e 6974 3e01 0003 2829  .....<init>...()
00000030: 5601 0004 436f 6465 0100 0f4c 696e 654e  V...Code...LineN
00000040: 756d 6265 7254 6162 6c65 0100 124c 6f63  umberTable...Loc
00000050: 616c 5661 7269 6162 6c65 5461 626c 6501  alVariableTable.
00000060: 0004 7468 6973 0100 134c 6f72 672f 6578  ..this...Lorg/ex
00000070: 616d 706c 652f 4d61 696e 323b 0100 046d  ample/Main2;...m
00000080: 6169 6e01 0016 285b 4c6a 6176 612f 6c61  ain...([Ljava/la
00000090: 6e67 2f53 7472 696e 673b 2956 0100 0461  ng/String;)V...a
000000a0: 7267 7301 0013 5b4c 6a61 7661 2f6c 616e  rgs...[Ljava/lan
000000b0: 672f 5374 7269 6e67 3b01 000a 536f 7572  g/String;...Sour
000000c0: 6365 4669 6c65 0100 0a4d 6169 6e32 2e6a  ceFile...Main2.j
000000d0: 6176 610c 0007 0008 0700 1c0c 001d 001e  ava.............
000000e0: 0100 0c6c 6f76 6520 796f 7520 796f 7507  ...love you you.
000000f0: 001f 0c00 2000 2101 0011 6f72 672f 6578  .... .!...org/ex
00000100: 616d 706c 652f 4d61 696e 3201 0010 6a61  ample/Main2...ja
00000110: 7661 2f6c 616e 672f 4f62 6a65 6374 0100  va/lang/Object..
00000120: 106a 6176 612f 6c61 6e67 2f53 7973 7465  .java/lang/Syste
00000130: 6d01 0003 6f75 7401 0015 4c6a 6176 612f  m...out...Ljava/
00000140: 696f 2f50 7269 6e74 5374 7265 616d 3b01  io/PrintStream;.
00000150: 0013 6a61 7661 2f69 6f2f 5072 696e 7453  ..java/io/PrintS
00000160: 7472 6561 6d01 0007 7072 696e 746c 6e01  tream...println.
00000170: 0015 284c 6a61 7661 2f6c 616e 672f 5374  ..(Ljava/lang/St
00000180: 7269 6e67 3b29 5600 2100 0500 0600 0000  ring;)V.!.......
00000190: 0000 0200 0100 0700 0800 0100 0900 0000  ................
000001a0: 2f00 0100 0100 0000 052a b700 01b1 0000  /........*......
000001b0: 0002 000a 0000 0006 0001 0000 0003 000b  ................
000001c0: 0000 000c 0001 0000 0005 000c 000d 0000  ................
000001d0: 0009 000e 000f 0001 0009 0000 0037 0002  .............7..
000001e0: 0001 0000 0009 b200 0212 03b6 0004 b100  ................
000001f0: 0000 0200 0a00 0000 0a00 0200 0000 0600  ................
00000200: 0800 0700 0b00 0000 0c00 0100 0000 0900  ................
00000210: 1000 1100 0000 0100 1200 0000 0200 13    ...............
#+end_src

文件格式验证所有的class文其实都是 *=cafebabe=* 咖啡宝贝;

*** 初始化过程

#+DOWNLOADED: screenshot @ 2024-11-10 00:57:41
[[file:images/类加载子系统/2024-11-10_00-57-41_screenshot.png]]
java类创造以后会有一个默认的构造器方法 ~init~,clinit是有静态代码块的时候才调用的方法
多个线程调用一个类进行初始化只会初始化一次,中间会进行加锁;



** 类加载器分类

#+DOWNLOADED: screenshot @ 2024-11-09 22:51:54
[[file:images/类加载子系统/2024-11-09_22-51-54_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 22:52:53
[[file:images/类加载子系统/2024-11-09_22-52-53_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-09 22:54:28
[[file:images/类加载子系统/2024-11-09_22-54-28_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 22:58:43
[[file:images/类加载子系统/2024-11-09_22-58-43_screenshot.png]]

#+begin_src java
  package org.example;

public class ClassloaderTest {

    public static void main(String[] args) {

        // 获取系统类加载器
        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
        System.out.println(systemClassLoader);//sun.misc.Launcher$AppClassLoader@18b4aac2

        // 获取扩展类加载器
        ClassLoader extClassLoader = systemClassLoader.getParent();
        System.out.println(extClassLoader);//sun.misc.Launcher$ExtClassLoader@6bc7c054

        // 引导类加载器
        ClassLoader bootStrapClassLoader = extClassLoader.getParent();
        System.out.println(bootStrapClassLoader);// null

        // 自定义类的加载器,默认是系统类加载器
        ClassLoader classLoader = ClassloaderTest.class.getClassLoader();
        System.out.println(classLoader); // sun.misc.Launcher$AppClassLoader@18b4aac2

        // 系统的核心类库都是使用引导类加载器进行加载的
        ClassLoader classLoader1 = String.class.getClassLoader();
        System.out.println(classLoader1);// null

    }
}

#+end_src

*** BootStrapClassLoader -- 启动类加载器

#+DOWNLOADED: screenshot @ 2024-11-09 23:35:09
[[file:images/类加载子系统/2024-11-09_23-35-09_screenshot.png]]

后续的加载器由启动类加载器进行加载,然后他们执行其他类的加载

#+DOWNLOADED: screenshot @ 2024-11-09 23:40:21
[[file:images/类加载子系统/2024-11-09_23-40-21_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 23:40:58
[[file:images/类加载子系统/2024-11-09_23-40-58_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-09 23:41:26
[[file:images/类加载子系统/2024-11-09_23-41-26_screenshot.png]]
#+begin_src java
  package org.example;

import sun.misc.Launcher;

import java.net.URL;

public class ClassLoaderTest2 {

    public static void main(String[] args) {
        // 获取BootStrapClassLoader能够加载哪些class路径
        System.out.println("********启动类加载器********");
        URL[] urLs = Launcher.getBootstrapClassPath().getURLs();
        for (URL urL : urLs) {
            System.out.println(urL.toExternalForm());
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/resources.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/rt.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/sunrsasign.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/jsse.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/jce.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/charsets.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/jfr.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/cat.jar
//            file:/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/classes
        }
        System.out.println("********扩展类加载器********");
        String extDirs = System.getProperty("java.ext.dirs");
        for (String path: extDirs.split(";")) {
            System.out.println(path);
        }
//        /Users/xieshuqiang/Library/Java/Extensions:
//        /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/ext:
//        /Library/Java/Extensions:
//        /Network/Library/Java/Extensions:
//        /System/Library/Java/Extensions:/usr/lib/java

    }
}
#+end_src

*** 用户自定义类加载器

#+DOWNLOADED: screenshot @ 2024-11-10 00:10:17
[[file:images/类加载子系统/2024-11-10_00-10-17_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 00:13:44
[[file:images/类加载子系统/2024-11-10_00-13-44_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-10 00:19:02
[[file:images/类加载子系统/2024-11-10_00-19-02_screenshot.png]]

*** 双亲委派机制

#+DOWNLOADED: screenshot @ 2024-11-10 00:25:36
[[file:images/类加载子系统/2024-11-10_00-25-36_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 00:31:19
[[file:images/类加载子系统/2024-11-10_00-31-19_screenshot.png]]
接口由bootstrap加载实现类由Application加载;

#+DOWNLOADED: screenshot @ 2024-11-10 00:33:45
[[file:images/类加载子系统/2024-11-10_00-33-45_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 00:37:28
[[file:images/类加载子系统/2024-11-10_00-37-28_screenshot.png]]

*** 补充

#+DOWNLOADED: screenshot @ 2024-11-10 00:40:15
[[file:images/类加载子系统/2024-11-10_00-40-15_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 00:41:05
[[file:images/类加载子系统/2024-11-10_00-41-05_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-10 00:42:17
[[file:images/类加载子系统/2024-11-10_00-42-17_screenshot.png]]
初始化就是Clint方法的调用;调用该方法就会堆静态代码块进行执行;



* 小结
类加载分为三部分,其中又分为不同的步骤
1. 加载
   把class文件引入到内存,渠道可以有多种
2. 链接 link
   1) verify 校验 cafebaby
   2) prepare
   3) resolve
3. Initzation
   初始化部分赋值,执行静态代码块中的内容;
