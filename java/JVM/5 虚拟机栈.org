* 概述

** 出现背景
#+DOWNLOADED: screenshot @ 2024-11-10 10:44:35
[[file:images/概述/2024-11-10_10-44-35_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-10 10:45:23
[[file:images/概述/2024-11-10_10-45-23_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-10 10:54:38
[[file:images/概述/2024-11-10_10-54-38_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 10:51:14
[[file:images/概述/2024-11-10_10-51-14_screenshot.png]]



#+DOWNLOADED: screenshot @ 2024-11-10 10:58:42
[[file:images/概述/2024-11-10_10-58-42_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-10 11:01:26
[[file:images/概述/2024-11-10_11-01-26_screenshot.png]]



#+DOWNLOADED: screenshot @ 2024-11-10 18:48:50
[[file:images/概述/2024-11-10_18-48-50_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 18:55:46
[[file:images/概述/2024-11-10_18-55-46_screenshot.png]]

方法的结束分两种: 1. 正常return
               2. 异常结束;如果对异常进行捕获处理就会按要求结束;




#+DOWNLOADED: screenshot @ 2024-11-10 19:08:18
[[file:images/概述/2024-11-10_19-08-18_screenshot.png]]
在debug的时候就能看到栈帧,和栈帧里面的各种数据;
	       
** 栈帧的内部结构

#+DOWNLOADED: screenshot @ 2024-11-10 22:57:55
[[file:images/概述/2024-11-10_22-57-55_screenshot.png]]

**** 局部变量表

    #+DOWNLOADED: screenshot @ 2024-11-10 23:08:46
    [[file:images/概述/2024-11-10_23-08-46_screenshot.png]]


    #+DOWNLOADED: screenshot @ 2024-11-10 23:18:31
    [[file:images/概述/2024-11-10_23-18-31_screenshot.png]]


    
**** clsslib类信息查看

[[file:images/概述/2024-11-10_23-43-07_screenshot.png]]


**** slot的理解

#+DOWNLOADED: screenshot @ 2024-11-10 23:46:13
[[file:images/概述/2024-11-10_23-46-13_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-10 23:47:27
[[file:images/概述/2024-11-10_23-47-27_screenshot.png]]
static方法局部变量是固定的,其他的方法会有一个this变量作为局部变量表引入;
因此static方法没发使用this关键字;

slot是存储的最小单位,因此不能由slot数量确定变量数量,long类型等会占用两个slot;

#+DOWNLOADED: screenshot @ 2024-11-10 23:56:41
[[file:images/概述/2024-11-10_23-56-41_screenshot.png]]


**** 静态变量和局部变量的对比


#+DOWNLOADED: screenshot @ 2024-11-11 00:06:14
[[file:images/概述/2024-11-11_00-06-14_screenshot.png]]
#+DOWNLOADED: screenshot @ 2024-11-11 00:02:50
[[file:images/概述/2024-11-11_00-02-50_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 00:04:15
[[file:images/概述/2024-11-11_00-04-15_screenshot.png]]


*** 操作数栈

#+DOWNLOADED: screenshot @ 2024-11-11 00:08:57
[[file:images/概述/2024-11-11_00-08-57_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 00:12:02
[[file:images/概述/2024-11-11_00-12-02_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 00:12:43
[[file:images/概述/2024-11-11_00-12-43_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 00:15:37
[[file:images/概述/2024-11-11_00-15-37_screenshot.png]]


*** 动态链接

#+DOWNLOADED: screenshot @ 2024-11-11 22:02:22
[[file:images/概述/2024-11-11_22-02-22_screenshot.png]]
java文件编译为字节码的时候,会生成一个常量池,jvm加载class文件之后会把常量池
放在方法区中,栈帧中存有方法常量池的引用方便的引用变量或对象;

之所以称为“动态链接”，是因为在运行时，JVM 需要根据当前执行的上下文动态地解析和确定符号引用对应的实际内存地址。这一过程是“动态”的，因为与“静态链接”相比，它并不是在编译期间完成的，而是要等到运行时，根据调用对象的实际类型等上下文信息来确定。
动态链接的“动态”之处

    运行时解析：
        Java 程序在编译阶段，方法和字段的调用只是存储为符号引用（符号引用是指类、方法和字段的名称及描述符）。
        JVM 在方法首次调用时才会去解析这些符号引用，将它们转化为具体的内存地址。这个解析是运行时进行的，因此称为“动态”。

    支持多态和动态分派：
        在 Java 中，方法调用的多态性（如父类引用指向子类对象）使得具体调用的方法实现并不能在编译期间确定，而要根据实际对象的类型在运行时决定。例如：

        Animal animal = new Dog();
        animal.speak();  // 动态链接到 Dog 类的 speak() 方法

        animal 引用的实际类型是 Dog，而非 Animal，因此 speak() 方法的具体实现是在运行时才解析到 Dog 的 speak() 方法。这种基于对象的动态分派和解析正是动态链接的主要表现。

    按需链接：
        在 Java 中，不是所有方法和字段在程序启动时就链接，而是“按需”进行的：只有当方法真正被调用或字段被访问时，JVM 才会进行动态链接。这种懒加载式的链接减少了不必要的加载和内存占用。

动态链接和静态链接的对比

    静态链接：在编译期间就将所有符号引用解析为具体的内存地址，并打包到最终生成的可执行文件中。C/C++ 等语言一般使用静态链接。
    动态链接：在运行时根据上下文动态解析符号引用。Java、Python 等语言使用动态链接，支持灵活的动态分派、继承、多态等特性，尤其适用于运行时可变的对象体系。

#+DOWNLOADED: screenshot @ 2024-11-11 22:10:23
[[file:images/概述/2024-11-11_22-10-23_screenshot.png]]


*** 方法的调用

#+DOWNLOADED: screenshot @ 2024-11-11 22:20:29
[[file:images/概述/2024-11-11_22-20-29_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 22:20:55
[[file:images/概述/2024-11-11_22-20-55_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 22:29:51
[[file:images/概述/2024-11-11_22-29-51_screenshot.png]]

=虚方法=?

#+DOWNLOADED: screenshot @ 2024-11-11 22:31:26
[[file:images/概述/2024-11-11_22-31-26_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 22:34:49
[[file:images/概述/2024-11-11_22-34-49_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 22:53:03
[[file:images/概述/2024-11-11_22-53-03_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 22:54:51
[[file:images/概述/2024-11-11_22-54-51_screenshot.png]]

**** 方法重写的本质

#+DOWNLOADED: screenshot @ 2024-11-11 23:04:49
[[file:images/概述/2024-11-11_23-04-49_screenshot.png]]

#+DOWNLOADED: screenshot @ 2024-11-11 23:10:56
[[file:images/概述/2024-11-11_23-10-56_screenshot.png]]



*** 方法返回地址
#+DOWNLOADED: screenshot @ 2024-11-12 20:55:48
[[file:images/概述/2024-11-12_20-55-48_screenshot.png]]
方法返回地址是前一个方法结束后给出下一个执行方法的地址;

#+DOWNLOADED: screenshot @ 2024-11-12 21:00:23
[[file:images/概述/2024-11-12_21-00-23_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-11-12 21:05:22
[[file:images/概述/2024-11-12_21-05-22_screenshot.png]]

*** 一些附加信息
可能会包含一些调试信息之类的;







** 小结
1. 虚拟机栈中包含一个个的栈帧,栈帧里面是方法的执行信息
2. 栈帧包含四部分,局部变量表,动态链接,方法返回地址,操作数栈,附加信息
   1) 局部变量表是对参数的汇总
   2) 动态链接是存储常量池的引用
   3) 返回地址是下一个方法执行的PC地址,并把返回值返回;
   4) 操作数栈是执行引擎进行操作的栈
   5) 附加信息一般用不到;
   
