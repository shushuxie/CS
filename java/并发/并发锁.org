** 并发的难点
高并发的效率很高,但是因为多线程的出现就会导致数据的操作会出现问题,当两个线程同时操作
一个数据的时候就会对数据进行竞争操作,有时候还会出现很多错误; 因此诞生了锁的概念
=lock= 就是为了保证数据在同一时间只能有一个线程对其进行操作,保证数据正确

** lock的分类
锁的分类五花八门,悲观、乐观、可重入、自旋锁、互斥等等 其实这只是一个从不同的方面来
描述一个事情; 一个人可以是男人,女人 还有各种特性,商人,医生,年龄等等; lock也是这个
意思;

#+begin_src shell
  锁  (Locks)
  │
  ├──  悲观锁 (Pessimistic Lock)
  │    │
  │    └──互斥锁 (Mutex)
  │       ├── 可重入锁 (Reentrant Lock)
  │       └── 不可重入锁 (Non-reentrant Lock)
  |
  ├──  乐观锁 (Optimistic Lock)
  │    │
  │    └── CAS (Compare-And-Swap)
  │
  ├──  自旋锁 (Spinlock)
  │
  └──  读写锁 (Read-Write Lock)
  │
  └─ 分布式锁(redis,zookper)

#+end_src

** 具体介绍

*** 乐观&悲观
乐观和悲观只是一个概念性的东西,是我们看待线程竞争的一种态度; 乐观锁认为大部分情况下线程之间
不会发生竞争,线程只在更新数据之前进行检查,看看是否是想要更新的数据,防止更新之前有其他线程
已经更新了;

悲观锁（Pessimistic Lock）：
    特点：假设会发生并发冲突，因此在每次数据操作前都上锁，确保数据在锁的持有期间不被其他线程修改。
    实现：通常用数据库锁机制，如行锁、表锁，或者使用Java的同步块（synchronized）和显式锁（如ReentrantLock）。
    适用场景：并发冲突频繁的场景。
乐观锁（Optimistic Lock）：
    特点：假设不会发生并发冲突，因此不直接加锁，而是在提交数据时检查是否有冲突。如果检测到冲突，则重试操作。
    实现：通过版本号机制(version)或CAS（Compare-And-Swap）操作。
    适用场景：并发冲突较少的场景。

    ~通过版本号实现的是update之前会判断版本号是否是更新前确定的那一个,如果是则更新~

    
*** 自旋锁（Spinlock）：
    特点：线程尝试获取锁时，如果锁已经被其他线程持有，则不会立即阻塞，而是不断循环检查锁的状态（自旋），直到锁可用。
    优点：减少线程上下文切换开销，适用于锁持有时间短的情况。
    缺点：如果锁持有时间较长，会浪费CPU资源。
    实现：可以通过AtomicReference等CAS原语。

    
**** 一种实现方式
#+begin_src java
	public class SpinLock {
	    private AtomicReference<Thread> cas = new AtomicReference<Thread>();
	    public void lock() {
		Thread current = Thread.currentThread();
		// 利用CAS
		while (!cas.compareAndSet(null, current)) {
		// DO nothing
		}

	    }
	    public void unlock() {            Thread current = Thread.currentThread();
	      cas.compareAndSet(current, null);

	    }

	}
  
#+end_src
    
*** 互斥锁（Mutex）：
    特点：线程尝试获取锁时，如果锁已经被其他线程持有，则该线程会被阻塞，直到锁被释放。
    优点：适用于锁持有时间较长的情况。
    缺点：需要线程上下文切换，开销较大。
    实现：包括内置锁（synchronized），显示锁（如ReentrantLock）。

*** 可重入&不可重入 
线程是否可以多次获取锁

可重入锁 reentrant Lock）：
    特点：同一个线程可以多次获取同一把锁而不会被阻塞。锁记录了其持有线程和持有次数。
    实现：如ReentrantLock和内置的synchronized。
    适用场景：在递归调用中保持同步，或在同一线程中调用一个已加锁的方法。

不可重入锁（Non-reentrant Lock）：
    特点：同一个线程再次尝试获取已经持有的锁时会被阻塞。
    实现：相对较少直接使用，不建议在应用中使用。

	
*** 读写锁（Read-Write Lock）：
    特点：分为读锁和写锁。读锁是共享的，多个线程可以同时持有读锁，而写锁是独占的，持有写锁时其他线程不能获取读锁或写锁。
    实现：如ReentrantReadWriteLock。
    适用场景：读多写少的场景，提高并发性。

    
*** 分布式锁

**** 基于Redis的分布式锁
Redis是一种高性能的键值存储，可以通过SETNX命令实现分布式锁。

实现思路：

使用SETNX（SET if Not eXists）命令设置锁的键，如果键不存在则设置成功。
锁的值设置为一个唯一标识（如UUID），用于在释放锁时验证持有者。
为锁设置过期时间，以防止因为进程宕机导致的死锁。
优点：

高性能，适合高并发场景。
Redis的过期机制防止死锁。
缺点：

需要处理Redis节点故障的情况，可以采用Redlock算法来增强可靠性。

****  基于数据库的分布式锁
通过在数据库中创建一条具有唯一标识的记录来实现分布式锁。

实现思路：

创建一张锁表，表中包含锁的名称和锁的状态。
使用独占事务（如行锁）来确保记录的唯一性和一致性。
优点：

实现简单，无需引入额外的组件。
使用数据库的事务机制保证一致性。
缺点：

性能和扩展性较差，数据库成为瓶颈。
依赖数据库的事务隔离机制，可能导致锁粒度过大。

