* 设计模式概述

设计模式不是别的，是一种经验的复用

** 设计原则
1. =封装变化=
   找出代码中不需要变动的部分独立出来，不要和经常变动的部分混在一起；
2. =针对接口编程，而不是针对实现编程=
   使用接口，多态实现
3. =多用组合，少用继承=
   影响更小，灵活，java是单继承，如果使用了后续想要扩展新的超类就会收到限制；
4. =为交互对象间的松耦合而努力=
5. =要依赖抽象，不要依赖具体=

** 抽象类和接口
1. 抽象类是相近类之间的关系，接口比较不相关
2. abstract class 使用extend关键字，不能用implements
3. Interface 只能使用 implements
4. 抽象类之间可以extends实现多层次抽象
5. Interface之间可以extends是想多层次接口
6. Interface不能继承抽象类
7. abstract class可以实现接口（有什么用呢？）
   #+begin_quote
   抽象类实现接口的意义在于，它可以让我们更加灵活地使用接口。通过抽象类实现接口，我们可以在抽象类中定义一些公共的方法，
   让子类可以继承这些方法，从而避免代码的重复。同时，抽象类可以提供一些默认的实现，让子类可以选择性地覆盖这些方法。
   这种方式可以让我们更加方便地使用接口，同时也可以提高代码的可维护性和可扩展性。
   #+end_quote
8. 普通的类之间也可以使用extends形成父子关系


* 具体设计模式

** 策略模式（strategy pattern）
definition: *策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于算法的客户；*
[[file:imag/Snipaste_2024-02-06_14-04-26.png]]

** 观察者模式
definition: *观察者模式定义了对象间的一对多依赖，这样以来，当一个对象改变时，它的所有依赖这都后收到通知，并自动更新；*

** 装饰着模式

** 工厂方法模式

*** 简单工厂模式
        简单工厂模式，其实不是一个模式，更像是一种编程习惯；
	[[file:imag/Snipaste_2024-01-19_22-31-31.png]]
简单工厂是一一种设计思路，对象的创建通过一个工厂类提供；创建方法可以用static方法,或者普通方法；只是把对象的产出集中在一起；

	披萨商店从factory获取pizza，pizza工厂可以根据参数制作不同的pizza，pizza类通过继承可以生成许多不同类型的pizza；

*** 工厂方法模式
definition： *工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让实例化推迟到子类*
工厂方法封装了子类的创建；

[[file:imag/Snipaste_2024-01-22_10-08-56.png]]

[[file:imag/Snipaste_2024-01-22_10-19-00.png]]

*** 抽象工厂模式
definition： *抽象工厂模式提供一个接口，用来创建相关或依赖对象的家族，而不需要指明具体类*
抽象工厂是通过接口实现的，不创建具体的子类，子类是通过对象家族组合而成的；

*** 工厂方法和抽象工厂的比较
+ 工厂方法使用extense，具体对象由子类创建；
+ 抽象工厂使用接口Interface，组合成具体对象
+ 抽象工厂适合家族式的对象创建
+ 抽象工厂组合各个家族对象时，符合工厂方法（由子类实现具体实例）


** 单例模式
definition： *单例模式，确保一个类只有一个实例，并提供全局访问* 
