* 设计模式概述

设计模式不是别的，是一种经验的复用

** 设计原则
1. =封装变化=
   找出代码中不需要变动的部分独立出来，不要和经常变动的部分混在一起；
2. =针对接口编程，而不是针对实现编程=
   使用接口，多态实现
3. =多用组合，少用继承=
   影响更小，灵活，java是单继承，如果使用了后续想要扩展新的超类就会收到限制；
4. =为交互对象间的松耦合而努力=

** 抽象类和接口
1. 抽象类是相近类之间的关系，接口比较不相关
2. abstract class 使用extend关键字，不能用implements
3. Interface 只能使用 implements
4. 抽象类之间可以extends实现多层次抽象
5. Interface之间可以extends是想多层次接口
6. Interface不能继承抽象类
7. abstract class可以实现接口（有什么用呢？）
   #+begin_quote
   抽象类实现接口的意义在于，它可以让我们更加灵活地使用接口。通过抽象类实现接口，我们可以在抽象类中定义一些公共的方法，
   让子类可以继承这些方法，从而避免代码的重复。同时，抽象类可以提供一些默认的实现，让子类可以选择性地覆盖这些方法。
   这种方式可以让我们更加方便地使用接口，同时也可以提高代码的可维护性和可扩展性。
   #+end_quote
8. 普通的类之间也可以使用extends形成父子关系


* 具体设计模式

** 策略模式（strategy pattern）
definition: *策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于算法的客户；*

** 观察者模式
definition: *观察者模式定义了对象间的一对多依赖，这样以来，当一个对象改变时，它的所有依赖这都后收到通知，并自动更新；*

** 装饰着模式

** 工厂方法模式

*** 简单工厂模式

*** 一般工厂模式
definition： *工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让实例化推迟到子类*

*** 抽象工厂模式
