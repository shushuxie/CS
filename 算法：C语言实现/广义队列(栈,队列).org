* 广义队列
栈和队列属于 *广义队列*,二者都属于实例，实例之间的差别就是删除时使用的方法不同；栈删除最近的一个，队列删除最早的一个；根据实现方式也有具体操作方式之间的差别；
广义队列还包括 *随机队列*、*优先队列* 和 *符号表* 。
** stack定义
数据实现先进后出的的一中数据类型，可以使用数组和链表实现；栈并没有什么特殊的，只是使用方式不同而已

*** 表达式前后缀
数学计算表达式有前缀，中缀和后缀之分，常见的就是中缀，计算符号在两个数字之间，后缀就是在之后；
+ =5 * (9+3)= 中缀表达式
+ =5 9 3 + *= 后缀表达式和上面等价


*** 后缀表达式求值
#+begin_src c
// 只能计算10以内的后缀表达式
  int main(int argc,char *argv[]) {
      char *end = "534*+";
      int N = strlen(end),i;
      STAKinit(N);
      for (i=0; i<N; i++) {
	  if (end[i] == '+')
	      STAKpush(STACKpop() + STACKpop());
	  if (end[i] == '*')
	      STAKpush(STACKpop() * STACKpop());
	  if (end[i] >= '0' && end[i] <= '9')
	      STAKpush(end[i] - '0');
      }
      printf("%d \n",STACKpop());
  }
#+end_src
*** 程序4.3 中缀后缀转换
中缀后缀转换遵循下面的思路
+ 从左到右读取中缀表达式
+ 左括号忽略
+ 数字直接输出
+ 符号入栈
+ 右括号操作符号出栈

#+begin_src c
// 表达式也有特殊的要求，部分必须要使用括号括起来，符号数量和
// 括号数量必须相等才能pop出所有的符号
int main(int argc,char *argv[]) {
    char *mid = "((5+(3*4))+(2*3))";
    int N = strlen(mid),i;
    STAKinit(N);
    for (i=0; i<N; i++) {
        if (mid[i] == '(')
            continue;
        if (mid[i] == '+' || mid[i] == '*')
            STAKpush(mid[i]);
        if (mid[i] == ')')
            printf("%c ",STACKpop());
        if (mid[i] >= '0' && mid[i] <= '9')
            printf("%c ",mid[i]);
    }
    printf("\n");


}
#+end_src>


*** ADT数据结构

*** adt定义
#+begin_src c
// 初始化
void STAKinit(int);
// 判读是否为空
int STACKempty(void);
// 放入一个元素
void STAKpush(Item);
// 弹出一元素
Item STACKpop();
#+end_src>

*** 数组实现
#+begin_src c
typedef int Item;
static int *s;
static int N;
// 初始化 maxN个数组，N代表初始化的指针；
void STAKinit(int maxN) {
  s =   malloc(maxN * sizeof (Item));
  N = 0;

}
// 判读是否为空
int STACKempty(void) {
    return N == 0;
}
// 放入一个元素
// N==0代表是空的此时可以放入元素，N是下标的+1，而且可以表示元素个数
void STAKpush(Item item) {
    s[N++] == item;
}
// 弹出一元素
Item STACKpop() {
    return s[--N];//N刚好大下标一个数字
}

#+end_src>

*** 链表实现k
#+begin_src c
typedef int Item;
typedef struct node *link;
struct node{
    Item item;
    link next;
};
static link head;
// 初始化
void STAKinit(int) {
    head = NULL;
}
link NEW(Item item,link next) {
    link x = malloc(sizeof *x);
    x->item = item;
    x->next = next; // 将x节点放到了最新节点的前面
    return x;
}
// 判读是否为空
int STACKempty(void) {
    return head == NULL;
}
// 放入一个元素
void STAKpush(Item item) {
    head = NEW(item,head);
}
// 弹出一元素
Item STACKpop() {
    Item item = head->item;
    link t = head->next;
    free(head);
    head = t;
    return item;
}
#+end_src>


*** 练习题

*** part1
1) 4.18,数组实现的栈运行后栈前5个数据的内容s[0] - s[4]
   #+begin_src c
    / 数组实现栈
    typedef char Item;
    static int MaxN = 100;
    static char *stack;
    static int N;
    void STACKinit(Item n) {
	stack = malloc(MaxN*(sizeof(Item)));
	N = 0;
    }
    void STACKpush(Item item) {
	stack[N++] = item;
    }
    Item STACKpop() {
	return stack[--N];
    }
    int STACKempty() {
	return N == 0;
    }

    int main(int argc,char *argv[]) {
	char *s = "LA*STI*N*FIR*ST**OU*T*******";
	int len = strlen(s);
	STACKinit(MaxN);
	for (int i=0; i<len; i++) {
	    if (s[i] == '*')
		printf("%c",STACKpop());
	    else
		STACKpush(s[i]);
	}
	printf("\n");
    int m = 4;
	while(m>=0)
	    printf("m{%d} %c ",m,stack[m--]);

    }
   #+end_src
2) 4.19,empty函数改为count函数，计算剩余的数量
    #+begin_src c
    // 数组实现
    int count(){
	return N;//N就代表了stack中剩余的元素数量
    }
    // 链表实现
    int count() {
    int c = 0;
    link t = head;
    while (t != NULL) {
	t = t->next;
	c++;
	}
	return c;
    }
    #+end_src>
3) 4.20,数组实现的栈POP为空push为满添加STACKerror函数
    #+begin_src c
    void STACKError(int flag) {
	if (flag == 0)
	    printf("stack is empty,pop error");
	else
	    printf("push out of bounds");
    }
    void STACKpush(Item item) {
	if (N > MaxN)
	    STACKError(1);
	stack[N++] = item;
    }
    Item STACKpop() {
	if (N<0)
	    STACKError(0);
	return stack[--N];
    }
    #+end_src>


** TODO 本章和第一章联系算法：连通性，二分算法


** 队列                                                          :definition:
队列是和栈相似的一种数据结构，但是符合FIFO，先进先出的特性；
=性质4.2:我们可以在常数时间内实现FIFO队列ADT的get和put操作，不论使用数组还是链表=

*** ADT数据结构
#+begin_src c
  void QUEUEinit(int);
  int QUEUEempty();
  void QUEUEput(Item);
  Item QUEUEget();
#+end_src

*** 链表实现1
=维护一个头部链接用来删除，维护一个尾部链接用来插入=

#+begin_src c
// queue implements for link;
typedef int Item;
typedef struct node *link;
struct node{
    Item item;
    link next;
};

static link queuq, head,tail;
void QUEUEinit(int) {
    queuq = NULL;
    head = queuq;
    tail = queuq;
}

int QUEUEempty() {
    return queuq->next == NULL;
}

void QUEUEput(Item item) {

    link t = malloc(sizeof *t);
    if (queuq == NULL) {
	head =t;
	queuq = t;
	tail = t;
	t->item = item;
    } else {
	t->item = item;
	tail->next = t;
	queuq = t;
	tail = t;
    }

}
Item QUEUEget() {
    link t = head;
    head = head->next;
    int item = t->item;
    free(t);
    printf("%d\n",item);
    return item;
}

int main(int argc,char *argv[]) {
    QUEUEinit(3);
    for (int i=0; i<10; i++) {
	QUEUEput(i);
    }
    while (queuq != NULL)
	QUEUEget();
}
#+end_src>

*** 链表实现2
#+begin_src c


#include <stdlib.h>
#include <printf.h>

typedef int Item;
typedef struct node *link;
struct node{
    Item item;
    link next;
};
// tail和head都是指代queue，只是不同地方的指针
static link tail,head;

link NEW(Item item,link next) {
    link t = malloc(sizeof *t);
    t->item = item;
    t->next = next;
    return t;
}
void QUEUEinit() {
    head = NULL;
    tail = NULL;
}
int QUEUEempty() {
    return head == NULL;
}

void QUEUEput(Item item) {
    if (head == NULL) {
        tail = NEW(item,tail);
        head = tail;
        return ;
    }
    tail->next = NEW(item,tail->next);
    tail = tail->next;
}

int QUEUEget() {
    Item  item = head->item;
    link t = head->next;
    free(head);
    head = t;
    return item;
}

int main() {
    QUEUEinit();
    QUEUEput(1);
    QUEUEput(2);
    QUEUEput(3);
    QUEUEput(4);
    while (head != NULL)
        printf("%d  ",QUEUEget());

    return 0;
}  
#+end_src
*** 数组实现
=保存一个头部index用来删除，尾部index用来插入，走到末尾循环到头部继续=
这里把数组看作一个循环循环，需要使用mol运算进行操做；
a%b = 0 代表二者相等；
#+begin_src c

#include <stdlib.h>
#include <printf.h>
typedef int Item;
// 引用指针
static Item *q;
static int N,tail,head;
void QUEUEinit(int maxN) {
    q = malloc((maxN+1)*sizeof (Item));
    N = maxN+1;
    head = N;//head此时和tail是同一个位置，head%N == tail
    tail = 0;
}

int QUEUEempty() {
    return head % N == tail;
}

void QUEUEput(Item item) {
    q[tail++] = item;
    tail = tail % N;
}
Item QUEUEget() {
    head = head % N;
    return q[head ++];
}
void printQueue(Item *q,int N) {
    int i;
    for (i=0; i<N; i++) {
        printf("%d  ",q[i]);
    }
    printf("head = %d, tail = %d",head,tail);
    printf("\n");
}

int main() {
    QUEUEinit(3);
    printQueue(q,4);
    QUEUEput(11);
    printQueue(q,4);
    QUEUEput(12);
    printQueue(q,4);
    QUEUEput(13);
    printQueue(q,4);
    QUEUEput(14);
    printQueue(q,4);
    QUEUEput(15);
    printQueue(q,4);
    QUEUEput(16);
    printQueue(q,4);
    QUEUEget();
    printQueue(q,4);
    return 0;
}
#+end_src>




** 复制和索引项
不允许重复数据，及其一些是想方式


*** 栈实现

** 一级ADT                                                       :definition:
=定义4.4 一级数据类型是一种我们可以有多种潜在实例的类型，可以把它赋给那些能够声明为保存这些实例的变量。=
一级adt要足够抽象，不能在定义中实现数据结构，要提供一个handle（一般是一个指针），具体的实现在实现类中出现
这样就会有更广的适用面；

[[file:imags/Snipaste_2023-11-07_15-08-10.png][一级ADT]]

#+begin_quote
我们使用术语句柄(handle),来描述对抽象对象的引用。目标是使客户程序可以引用用于赋值语句中的抽象对象，以及向内置数据类型一样
作为函数的参数和返回值，同时在客户程序中隐藏对象的表示；

三个方面
1) 方便引用抽象对象
2) 和内置类型一样在函数中使用
3) 客户程序中隐藏表示
#+end_quote

[[file:imags/Snipaste_2023-11-07_14-20-15.png][数据结构和抽象ADT区别]]


*** 复数的数据结构

#+begin_src c

typedef struct {float Re; float Im;} Complex;
Complex COMPLEXinit(float,float);
float Re(Complex);
float Im(Complex);
Complex COMPLEXmult(Complex,Complex);

typedef struct {float Re; float Im;} Complex;
Complex COMPLEXinit(float,float);

Complex COMPLEXinit(float Re, float Im) {
    Complex t;
    t.Im = Im;
    t.Re = Re;
    return t;
}

float Re(Complex t) {
    return t.Re;
}
float Im(Complex t) {
    return t.Im;
}
// ac - bd + (ad + bc)i
//其中，ac和bd为实部，ad和bc为虚部。
Complex COMPLEXmult(Complex a,Complex b) {
    Complex t;
    t.Re = a.Re * b.Re - a.Im*b.Im;
    t.Im = a.Re*b.Im + a.Im*b.Re;
    return t;
}

#+end_src>

*** 复数的一级ADT
#+begin_src c
typedef struct complex *Complex;
Complex COMPLEXinit(float,float);
float Re(Complex);
float Im(Complex);
Complex COMPLEXmult(Complex,Complex);

// 实现
typedef struct complex *Complex;
struct complex {float Re; float Im;};
Complex COMPLEXinit(float Re,float Im) {
    Complex t = malloc(sizeof *t);
    t->Re = Re;
    t->Im = Im;
    return t;
}
float Re(Complex t) {return t->Re;}
float Im(Complex t) { return  t->Im;}
Complex COMPLEXmult(Complex a,Complex b) {
    return COMPLEXinit(a->Re * b->Re - a->Im * b->Im,
                       a->Re * b->Im + a->Im*b->Re);
}
#+end_src>

*** 队列的一级ADT
#+begin_src c
typedef struct queue *Q;
void QUEUEdump(Q);
Q QUEUEinit(int MaxN);
int QUEUEempty(Q);
void QUEUEput(Q,Item);
Item QUEUEget(Q);

typedef int Item;
// Q是指向链表的指针，链表是一个结构体，里面记录头和尾指针，存储数据使用链表；
typedef struct queue *Q;
typedef struct Qnode *link;
struct Qnode {
    Item item;
    link next;
};
// 队列的操作方式插入到尾部，删除从头部开始
struct queue {link head; link tail;};
// new是从头部往后面添加链接
// 这里的next是NULL指针，一直指代tail指针的next，因为这里是取代tail节点
link New (Item item,link next) {
    link t = malloc(sizeof *t);
    t->item = item;
    t->next = next;
    return t;
}
void QUEUEdump(Q);
Q QUEUEinit(int MaxN) {
    Q q = malloc(sizeof *q);
    q->head = NULL;
    return q;
}
int QUEUEempty(Q q) { return q->head == NULL;}
void QUEUEput(Q q,Item item) {
    if (q->head == NULL) {
        q->tail = New(item,q->head);
        q->head = q->tail;// 头和尾指向同一个
        return;
    }
     q->tail->next = New(item,q->tail->next);
     q->tail = q->tail->next; // 结尾更新为最新的节点
}
Item QUEUEget(Q q) {
    link t = q->head->next;// 这里不写为q->head，后续free函数导致节点为null；
    Item item = q->head->item;
    free(q->head);
    q->head = t;
    return item;
}

#+end_src>
