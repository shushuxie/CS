** 递归
递归就是自己调用自己的程序，两个条件
1) 自己调用自己
2) 必须有终止条件

*递归算法* 就是通过解决同一个问题的一个或者多个更小的实例来最终解决一个大问题的算法;
在c语言中一般通过 *递归函数* 来解决;

递归程序满足两个基本属性
+ 它们必须明确地解决归纳基础（归纳的基本调节，结束调节）
+ 每一次递归调用，必须包括更小的参数值（可以回到归纳基础那边，结束递归）


** 欧几里得-最大公约数（辗转相除法）



** 链表递归函数示例

#+begin_src c
  // 计算链表长度
  int count (link x)
    {
      if (x == NULL) return 0;
      return 1 + count(x -> next);
    }
#+end_src

#+begin_src c
    // 遍历链表
  void traverse(link h, void (*visit)(link))
    {
      if (h == NULL) return;
      (*visit)(h);
      traverse(h->next, visit);
    }
#+end_src

#+begin_src c
  // 遍历链表
  void traverseR(link h, void (*visit)(link))
    {
      if (h == NULL) return;
      traverserR(h->next, visit);
      (*visit)(h);
    }
#+end_src

#+begin_src c
  // 删除链表中对应的值
  link delete(link x, Item v)
    {
      if (x == NULL) return NULL;
      if (eq(x->item,v))
	{
	  link t = x->next; free(x); return t;
	}
      x -> next = delete(x-> next,v);
      return x;

    }
#+end_src


** 练习题

*** part1

**** 5.1
#+begin_src c
#include <math.h>
#include <printf.h>

int factorial(int N) {
    if (N == 0) return 1;
    return N * factorial(N-1);
}
// log计算 log(a*b) = log(a) + log(b)
double logFactorial(int N) {
    if (N == 0) return log10(1);
    return log10(N) + logFactorial(N-1);
}

int main() {

    double a = log10(6);
    int b = factorial(3);
    double c = logFactorial(3);

    printf(" a = %f  \n b = %d \n c = %f\n",a,b,c);


}
#+end_src

**** 5.2
#+begin_src c
#include <printf.h>

//计算 N! % M  有如下性质
// a * b % M = (a % M) * (b % M)%M;
// N! % M = ((N%M)*(N-1 %M)... (1%M)) % M;
int modFactorial(int N, int M) {
    if (N == 1) return 1 % M;
    return (N%M * modFactorial(N-1,M))%M;
}

int main() {

    int a = modFactorial(5,7);
    int b = 120 % 7;
    printf(" a =%d\n b = %d\n",a,b);



}
#+end_src

**** 5.5
#+begin_src c
int gcd(int m, int n) {
    while (n != 0) {
	n = m%n;
	if (n != 0) {
	    m = n;
	}
    }

    return m;
}
#+end_src

**** 5.6
#+begin_example
gcd(89,55)
  gcd(55,34)
    gcd(34,21)
      gcd(21,13)
        gcd(13,8)
	  gcd(8,5)
	    gcd(5,3)
	      gcd(3,2)
	        gcd(2,1)
		  gcd(1,0)
#+end_example

**** 5.9
#+begin_src c
int stackTailCal(char *NRP) {
    if (*NRP == '\0')
        return pop();
    if (*NRP == '*') {
        push(pop() * pop());
        return stackTailCal(++NRP);
    }
    if (*NRP == '+') {
        push(pop()+pop());
        return stackTailCal(++NRP);
    }
    push(*NRP - 48);
    return stackTailCal(++NRP);
}
int main() {
    char *str = "345*+";
    printf("========%d\n", stackTailCal(str));

    return 0;
}
#+end_src



** 分治法
#+begin_quote
分治法是一种将问题分解成多个子问题并分别解决的算法设计思想。它的基本思想是将一个大问题分解成多个规模较小但结构与原问题相同的子问题，然后递归地解决这些子问题，最后将子问题的解合并得到原问题的解。
最常用的是分为两个部分单独解决；
使用分治法解决问题的一般步骤如下：

1. 将原问题分解成多个规模较小的子问题。
2. 递归地解决每个子问题，直到子问题可以直接解决。
3. 将子问题的解合并得到原问题的解。
分治法常用于解决一些具有重叠子问题结构的问题，比如合并排序、快速排序、二分查找等。通过将问题分解成多个子问题并并行或串行地解决，可以提高算法的效率。
#+end_quote


*** 求数组最大值
把数组分为两个部分，找出左边最大值返回，右边最大值返回，最后比较两边最大值；程序实际上是吧数组分为了多个部分，最后单个比较；

#+begin_src c
 // l是数组起始索引，r是结束索引
int findMax(int a[],int l,int r) {
    int u,v, m = (l+r)/2; //找到数组中间位置，奇数不影响结果0-5 /2 = 2；
    if (l == r) return a[l];
    u = findMax(a,l,m);
    v = findMax(a,m+1,r);
    if (u > v)
        return u;
    else
        return v;
}

int main() {
    int a[5] = {4,5,88,22,99};
    int max = findMax(a,0,4);
    printf("max = %d\n",max);
}
#+end_src



